package insights

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// CategoryType enumerates the values for category type.
type CategoryType string

const (
	// CategoryLogs ...
	CategoryLogs CategoryType = "Logs"
	// CategoryMetrics ...
	CategoryMetrics CategoryType = "Metrics"
	// CategoryNone represents an empty CategoryType.
	CategoryNone CategoryType = ""
)

// ComparisonOperationType enumerates the values for comparison operation type.
type ComparisonOperationType string

const (
	// ComparisonOperationEquals ...
	ComparisonOperationEquals ComparisonOperationType = "Equals"
	// ComparisonOperationGreaterThan ...
	ComparisonOperationGreaterThan ComparisonOperationType = "GreaterThan"
	// ComparisonOperationGreaterThanOrEqual ...
	ComparisonOperationGreaterThanOrEqual ComparisonOperationType = "GreaterThanOrEqual"
	// ComparisonOperationLessThan ...
	ComparisonOperationLessThan ComparisonOperationType = "LessThan"
	// ComparisonOperationLessThanOrEqual ...
	ComparisonOperationLessThanOrEqual ComparisonOperationType = "LessThanOrEqual"
	// ComparisonOperationNone represents an empty ComparisonOperationType.
	ComparisonOperationNone ComparisonOperationType = ""
	// ComparisonOperationNotEquals ...
	ComparisonOperationNotEquals ComparisonOperationType = "NotEquals"
)

// ConditionOperatorType enumerates the values for condition operator.
type ConditionOperatorType string

const (
	// ConditionOperatorGreaterThan ...
	ConditionOperatorGreaterThan ConditionOperatorType = "GreaterThan"
	// ConditionOperatorGreaterThanOrEqual ...
	ConditionOperatorGreaterThanOrEqual ConditionOperatorType = "GreaterThanOrEqual"
	// ConditionOperatorLessThan ...
	ConditionOperatorLessThan ConditionOperatorType = "LessThan"
	// ConditionOperatorLessThanOrEqual ...
	ConditionOperatorLessThanOrEqual ConditionOperatorType = "LessThanOrEqual"
	// ConditionOperatorNone represents an empty ConditionOperatorType.
	ConditionOperatorNone ConditionOperatorType = ""
)

// MetricStatisticType enumerates the values for metric statistic type.
type MetricStatisticType string

const (
	// MetricStatisticAverage ...
	MetricStatisticAverage MetricStatisticType = "Average"
	// MetricStatisticMax ...
	MetricStatisticMax MetricStatisticType = "Max"
	// MetricStatisticMin ...
	MetricStatisticMin MetricStatisticType = "Min"
	// MetricStatisticNone represents an empty MetricStatisticType.
	MetricStatisticNone MetricStatisticType = ""
	// MetricStatisticSum ...
	MetricStatisticSum MetricStatisticType = "Sum"
)

// OdataType enumerates the values for odata type.
type OdataType string

const (
	// OdataOdataTypeMicrosoftAzureManagementInsightsModelsRuleManagementEventDataSource ...
	OdataOdataTypeMicrosoftAzureManagementInsightsModelsRuleManagementEventDataSource OdataType = "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource"
	// OdataOdataTypeMicrosoftAzureManagementInsightsModelsRuleMetricDataSource ...
	OdataOdataTypeMicrosoftAzureManagementInsightsModelsRuleMetricDataSource OdataType = "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"
)

// OdataType1Type enumerates the values for odata type 1.
type OdataType1Type string

const (
	// OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsLocationThresholdRuleCondition ...
	OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsLocationThresholdRuleCondition OdataType1Type = "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition"
	// OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsManagementEventRuleCondition ...
	OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsManagementEventRuleCondition OdataType1Type = "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition"
	// OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsThresholdRuleCondition ...
	OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsThresholdRuleCondition OdataType1Type = "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"
)

// OdataType1Type enumerates the values for odata type 1.
type OdataType1Type string

const (
	// OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsRuleEmailAction ...
	OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsRuleEmailAction OdataType1Type = "Microsoft.Azure.Management.Insights.Models.RuleEmailAction"
	// OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsRuleWebhookAction ...
	OdataType1OdataTypeMicrosoftAzureManagementInsightsModelsRuleWebhookAction OdataType1Type = "Microsoft.Azure.Management.Insights.Models.RuleWebhookAction"
)

// ReceiverStatusType enumerates the values for receiver status.
type ReceiverStatusType string

const (
	// ReceiverStatusDisabled ...
	ReceiverStatusDisabled ReceiverStatusType = "Disabled"
	// ReceiverStatusEnabled ...
	ReceiverStatusEnabled ReceiverStatusType = "Enabled"
	// ReceiverStatusNone represents an empty ReceiverStatusType.
	ReceiverStatusNone ReceiverStatusType = ""
	// ReceiverStatusNotSpecified ...
	ReceiverStatusNotSpecified ReceiverStatusType = "NotSpecified"
)

// RecurrenceFrequencyType enumerates the values for recurrence frequency.
type RecurrenceFrequencyType string

const (
	// RecurrenceFrequencyDay ...
	RecurrenceFrequencyDay RecurrenceFrequencyType = "Day"
	// RecurrenceFrequencyHour ...
	RecurrenceFrequencyHour RecurrenceFrequencyType = "Hour"
	// RecurrenceFrequencyMinute ...
	RecurrenceFrequencyMinute RecurrenceFrequencyType = "Minute"
	// RecurrenceFrequencyMonth ...
	RecurrenceFrequencyMonth RecurrenceFrequencyType = "Month"
	// RecurrenceFrequencyNone ...
	RecurrenceFrequencyNone RecurrenceFrequencyType = "None"
	// RecurrenceFrequencyNone represents an empty RecurrenceFrequencyType.
	RecurrenceFrequencyNone RecurrenceFrequencyType = ""
	// RecurrenceFrequencySecond ...
	RecurrenceFrequencySecond RecurrenceFrequencyType = "Second"
	// RecurrenceFrequencyWeek ...
	RecurrenceFrequencyWeek RecurrenceFrequencyType = "Week"
	// RecurrenceFrequencyYear ...
	RecurrenceFrequencyYear RecurrenceFrequencyType = "Year"
)

// ScaleDirectionType enumerates the values for scale direction.
type ScaleDirectionType string

const (
	// ScaleDirectionDecrease ...
	ScaleDirectionDecrease ScaleDirectionType = "Decrease"
	// ScaleDirectionIncrease ...
	ScaleDirectionIncrease ScaleDirectionType = "Increase"
	// ScaleDirectionNone ...
	ScaleDirectionNone ScaleDirectionType = "None"
	// ScaleDirectionNone represents an empty ScaleDirectionType.
	ScaleDirectionNone ScaleDirectionType = ""
)

// ScaleType enumerates the values for scale type.
type ScaleType string

const (
	// ScaleChangeCount ...
	ScaleChangeCount ScaleType = "ChangeCount"
	// ScaleExactCount ...
	ScaleExactCount ScaleType = "ExactCount"
	// ScaleNone represents an empty ScaleType.
	ScaleNone ScaleType = ""
	// ScalePercentChangeCount ...
	ScalePercentChangeCount ScaleType = "PercentChangeCount"
)

// TimeAggregationOperatorType enumerates the values for time aggregation operator.
type TimeAggregationOperatorType string

const (
	// TimeAggregationOperatorAverage ...
	TimeAggregationOperatorAverage TimeAggregationOperatorType = "Average"
	// TimeAggregationOperatorLast ...
	TimeAggregationOperatorLast TimeAggregationOperatorType = "Last"
	// TimeAggregationOperatorMaximum ...
	TimeAggregationOperatorMaximum TimeAggregationOperatorType = "Maximum"
	// TimeAggregationOperatorMinimum ...
	TimeAggregationOperatorMinimum TimeAggregationOperatorType = "Minimum"
	// TimeAggregationOperatorNone represents an empty TimeAggregationOperatorType.
	TimeAggregationOperatorNone TimeAggregationOperatorType = ""
	// TimeAggregationOperatorTotal ...
	TimeAggregationOperatorTotal TimeAggregationOperatorType = "Total"
)

// TimeAggregationType enumerates the values for time aggregation type.
type TimeAggregationType string

const (
	// TimeAggregationAverage ...
	TimeAggregationAverage TimeAggregationType = "Average"
	// TimeAggregationCount ...
	TimeAggregationCount TimeAggregationType = "Count"
	// TimeAggregationMaximum ...
	TimeAggregationMaximum TimeAggregationType = "Maximum"
	// TimeAggregationMinimum ...
	TimeAggregationMinimum TimeAggregationType = "Minimum"
	// TimeAggregationNone represents an empty TimeAggregationType.
	TimeAggregationNone TimeAggregationType = ""
	// TimeAggregationTotal ...
	TimeAggregationTotal TimeAggregationType = "Total"
)

// ActionGroup - An Azure action group.
type ActionGroup struct {
	// GroupShortName - The short name of the action group. This will be used in SMS messages.
	GroupShortName string `json:"groupShortName,omitempty"`
	// Enabled - Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.
	Enabled bool `json:"enabled,omitempty"`
	// EmailReceivers - The list of email receivers that are part of this action group.
	EmailReceivers []EmailReceiver `json:"emailReceivers,omitempty"`
	// SmsReceivers - The list of SMS receivers that are part of this action group.
	SmsReceivers []SmsReceiver `json:"smsReceivers,omitempty"`
	// WebhookReceivers - The list of webhook receivers that are part of this action group.
	WebhookReceivers []WebhookReceiver `json:"webhookReceivers,omitempty"`
	// ItsmReceivers - The list of ITSM receivers that are part of this action group.
	ItsmReceivers []ItsmReceiver `json:"itsmReceivers,omitempty"`
	// AzureAppPushReceivers - The list of AzureAppPush receivers that are part of this action group.
	AzureAppPushReceivers []AzureAppPushReceiver `json:"azureAppPushReceivers,omitempty"`
	// AutomationRunbookReceivers - The list of AutomationRunbook receivers that are part of this action group.
	AutomationRunbookReceivers []AutomationRunbookReceiver `json:"automationRunbookReceivers,omitempty"`
}

// ActionGroupList - A list of action groups.
type ActionGroupList struct {
	rawResponse *http.Response
	// Value - The list of action groups.
	Value []ActionGroupResource `json:"value,omitempty"`
	// NextLink - Provides the link to retrieve the next set of elements.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (agl ActionGroupList) Response() *http.Response {
	return agl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (agl ActionGroupList) StatusCode() int {
	return agl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (agl ActionGroupList) Status() string {
	return agl.rawResponse.Status
}

// ActionGroupPatch - An Azure action group for patch operations.
type ActionGroupPatch struct {
	// Enabled - Indicates whether this action group is enabled. If an action group is not enabled, then none of its actions will be activated.
	Enabled *bool `json:"enabled,omitempty"`
}

// ActionGroupPatchBody - An action group object for the body of patch operations.
type ActionGroupPatchBody struct {
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The action group settings for an update operation.
	*ActionGroupPatch `json:"properties,omitempty"`
}

// ActionGroupResource - An action group resource.
type ActionGroupResource struct {
	rawResponse *http.Response
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The action groups properties of the resource.
	*ActionGroup `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (agr ActionGroupResource) Response() *http.Response {
	return agr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (agr ActionGroupResource) StatusCode() int {
	return agr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (agr ActionGroupResource) Status() string {
	return agr.rawResponse.Status
}

// ActivityLogAlert - An Azure activity log alert.
type ActivityLogAlert struct {
	// Scopes - A list of resourceIds that will be used as prefixes. The alert will only apply to activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item.
	Scopes []string `json:"scopes,omitempty"`
	// Enabled - Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its actions will be activated.
	Enabled *bool `json:"enabled,omitempty"`
	// Condition - The condition that will cause this alert to activate.
	Condition ActivityLogAlertAllOfCondition `json:"condition,omitempty"`
	// Actions - The actions that will activate when the condition is met.
	Actions ActivityLogAlertActionList `json:"actions,omitempty"`
	// Description - A description of this activity log alert.
	Description *string `json:"description,omitempty"`
}

// ActivityLogAlertActionGroup - A pointer to an Azure Action Group.
type ActivityLogAlertActionGroup struct {
	// ActionGroupID - The resourceId of the action group. This cannot be null or empty.
	ActionGroupID string `json:"actionGroupId,omitempty"`
	// WebhookProperties - the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties map[string]string `json:"webhookProperties,omitempty"`
}

// ActivityLogAlertActionList - A list of activity log alert actions.
type ActivityLogAlertActionList struct {
	// ActionGroups - The list of activity log alerts.
	ActionGroups []ActivityLogAlertActionGroup `json:"actionGroups,omitempty"`
}

// ActivityLogAlertAllOfCondition - An Activity Log alert condition that is met when all its member conditions are met.
type ActivityLogAlertAllOfCondition struct {
	// AllOf - The list of activity log alert conditions.
	AllOf []ActivityLogAlertLeafCondition `json:"allOf,omitempty"`
}

// ActivityLogAlertLeafCondition - An Activity Log alert condition that is met by comparing an activity log field and
// value.
type ActivityLogAlertLeafCondition struct {
	// Field - The name of the field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties.'.
	Field string `json:"field,omitempty"`
	// Equals - The field value will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals string `json:"equals,omitempty"`
}

// ActivityLogAlertList - A list of activity log alerts.
type ActivityLogAlertList struct {
	rawResponse *http.Response
	// Value - The list of activity log alerts.
	Value []ActivityLogAlertResource `json:"value,omitempty"`
	// NextLink - Provides the link to retrieve the next set of elements.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (alal ActivityLogAlertList) Response() *http.Response {
	return alal.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (alal ActivityLogAlertList) StatusCode() int {
	return alal.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (alal ActivityLogAlertList) Status() string {
	return alal.rawResponse.Status
}

// ActivityLogAlertPatch - An Azure activity log alert for patch operations.
type ActivityLogAlertPatch struct {
	// Enabled - Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its actions will be activated.
	Enabled *bool `json:"enabled,omitempty"`
}

// ActivityLogAlertPatchBody - An activity log alert object for the body of patch operations.
type ActivityLogAlertPatchBody struct {
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The activity log alert settings for an update operation.
	*ActivityLogAlertPatch `json:"properties,omitempty"`
}

// ActivityLogAlertResource - An activity log alert resource.
type ActivityLogAlertResource struct {
	rawResponse *http.Response
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The activity log alert properties of the resource.
	*ActivityLogAlert `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (alar ActivityLogAlertResource) Response() *http.Response {
	return alar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (alar ActivityLogAlertResource) StatusCode() int {
	return alar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (alar ActivityLogAlertResource) Status() string {
	return alar.rawResponse.Status
}

// AlertRule - An alert rule.
type AlertRule struct {
	// Name - the name of the alert rule.
	Name string `json:"name,omitempty"`
	// Description - the description of the alert rule that will be included in the alert email.
	Description *string `json:"description,omitempty"`
	// IsEnabled - the flag that indicates whether the alert rule is enabled.
	IsEnabled bool `json:"isEnabled,omitempty"`
	// Condition - the condition that results in the alert rule being activated.
	Condition RuleCondition `json:"condition,omitempty"`
	// Actions - the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions []RuleAction `json:"actions,omitempty"`
	// LastUpdatedTime - Last time the rule was updated in ISO8601 format.
	LastUpdatedTime *time.Time `json:"lastUpdatedTime,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for AlertRule struct.
func (ar *AlertRule) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		ar.Name = &name
	}

	v = m["description"]
	if v != nil {
		var description string
		err = json.Unmarshal(*m["description"], &description)
		if err != nil {
			return err
		}
		ar.Description = &description
	}

	v = m["isEnabled"]
	if v != nil {
		var isEnabled bool
		err = json.Unmarshal(*m["isEnabled"], &isEnabled)
		if err != nil {
			return err
		}
		ar.IsEnabled = &isEnabled
	}

	v = m["condition"]
	if v != nil {
		condition, err := unmarshalRuleCondition(*m["condition"])
		if err != nil {
			return err
		}
		ar.Condition = condition
	}

	v = m["actions"]
	if v != nil {
		actions, err := unmarshalRuleActionArray(*m["actions"])
		if err != nil {
			return err
		}
		ar.Actions = &actions
	}

	v = m["lastUpdatedTime"]
	if v != nil {
		var lastUpdatedTime time.Time
		err = json.Unmarshal(*m["lastUpdatedTime"], &lastUpdatedTime)
		if err != nil {
			return err
		}
		ar.LastUpdatedTime = &lastUpdatedTime
	}

	return nil
}

// AlertRuleResource - The alert rule resource.
type AlertRuleResource struct {
	rawResponse *http.Response
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The alert rule properties of the resource.
	*AlertRule `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (arr AlertRuleResource) Response() *http.Response {
	return arr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (arr AlertRuleResource) StatusCode() int {
	return arr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (arr AlertRuleResource) Status() string {
	return arr.rawResponse.Status
}

// AlertRuleResourceCollection - Represents a collection of alert rule resources.
type AlertRuleResourceCollection struct {
	rawResponse *http.Response
	// Value - the values for the alert rule resources.
	Value []AlertRuleResource `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (arrc AlertRuleResourceCollection) Response() *http.Response {
	return arrc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (arrc AlertRuleResourceCollection) StatusCode() int {
	return arrc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (arrc AlertRuleResourceCollection) Status() string {
	return arrc.rawResponse.Status
}

// AlertRuleResourcePatch - The alert rule object for patch operations.
type AlertRuleResourcePatch struct {
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties of an alert rule.
	*AlertRule `json:"properties,omitempty"`
}

// AutomationRunbookReceiver - The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiver struct {
	// AutomationAccountID - The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountID string `json:"automationAccountId,omitempty"`
	// RunbookName - The name for this runbook.
	RunbookName string `json:"runbookName,omitempty"`
	// WebhookResourceID - The resource id for webhook linked to this runbook.
	WebhookResourceID string `json:"webhookResourceId,omitempty"`
	// IsGlobalRunbook - Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `json:"isGlobalRunbook,omitempty"`
	// Name - Indicates name of the webhook.
	Name *string `json:"name,omitempty"`
	// ServiceURI - The URI where webhooks should be sent.
	ServiceURI *string `json:"serviceUri,omitempty"`
}

// AutoscaleNotification - Autoscale notification.
type AutoscaleNotification struct {
	// Operation - the operation associated with the notification and its value must be "scale"
	Operation string `json:"operation,omitempty"`
	// Email - the email notification.
	Email *EmailNotification `json:"email,omitempty"`
	// Webhooks - the collection of webhook notifications.
	Webhooks []WebhookNotification `json:"webhooks,omitempty"`
}

// AutoscaleProfile - Autoscale profile.
type AutoscaleProfile struct {
	// Name - the name of the profile.
	Name string `json:"name,omitempty"`
	// Capacity - the number of instances that can be used during this profile.
	Capacity ScaleCapacity `json:"capacity,omitempty"`
	// Rules - the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
	Rules []ScaleRule `json:"rules,omitempty"`
	// FixedDate - the specific date-time for the profile. This element is not used if the Recurrence element is used.
	FixedDate *TimeWindow `json:"fixedDate,omitempty"`
	// Recurrence - the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
	Recurrence *Recurrence `json:"recurrence,omitempty"`
}

// AutoscaleSetting - A setting that contains all of the configuration for the automatic scaling of a resource.
type AutoscaleSetting struct {
	// Profiles - the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.
	Profiles []AutoscaleProfile `json:"profiles,omitempty"`
	// Notifications - the collection of notifications.
	Notifications []AutoscaleNotification `json:"notifications,omitempty"`
	// Enabled - the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'true'.
	Enabled *bool `json:"enabled,omitempty"`
	// Name - the name of the autoscale setting.
	Name *string `json:"name,omitempty"`
	// TargetResourceURI - the resource identifier of the resource that the autoscale setting should be added to.
	TargetResourceURI *string `json:"targetResourceUri,omitempty"`
}

// AutoscaleSettingResource - The autoscale setting resource.
type AutoscaleSettingResource struct {
	rawResponse *http.Response
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The autoscale setting of the resource.
	*AutoscaleSetting `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (asr AutoscaleSettingResource) Response() *http.Response {
	return asr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (asr AutoscaleSettingResource) StatusCode() int {
	return asr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (asr AutoscaleSettingResource) Status() string {
	return asr.rawResponse.Status
}

// AutoscaleSettingResourceCollection - Represents a collection of autoscale setting resources.
type AutoscaleSettingResourceCollection struct {
	rawResponse *http.Response
	// Value - the values for the autoscale setting resources.
	Value []AutoscaleSettingResource `json:"value,omitempty"`
	// NextLink - URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (asrc AutoscaleSettingResourceCollection) Response() *http.Response {
	return asrc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (asrc AutoscaleSettingResourceCollection) StatusCode() int {
	return asrc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (asrc AutoscaleSettingResourceCollection) Status() string {
	return asrc.rawResponse.Status
}

// AutoscaleSettingResourcePatch - The autoscale setting object for patch operations.
type AutoscaleSettingResourcePatch struct {
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The autoscale setting properties of the update operation.
	*AutoscaleSetting `json:"properties,omitempty"`
}

// AzureAppPushReceiver - The Azure mobile App push notification receiver.
type AzureAppPushReceiver struct {
	// Name - The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name string `json:"name,omitempty"`
	// EmailAddress - The email address registered for the Azure mobile app.
	EmailAddress string `json:"emailAddress,omitempty"`
}

// DiagnosticSettings - The diagnostic settings.
type DiagnosticSettings struct {
	// StorageAccountID - The resource ID of the storage account to which you would like to send Diagnostic Logs.
	StorageAccountID *string `json:"storageAccountId,omitempty"`
	// EventHubAuthorizationRuleID - The resource Id for the event hub authorization rule.
	EventHubAuthorizationRuleID *string `json:"eventHubAuthorizationRuleId,omitempty"`
	// EventHubName - The name of the event hub. If none is specified, the default event hub will be selected.
	EventHubName *string `json:"eventHubName,omitempty"`
	// Metrics - the list of metric settings.
	Metrics []MetricSettings `json:"metrics,omitempty"`
	// Logs - the list of logs settings.
	Logs []LogSettings `json:"logs,omitempty"`
	// WorkspaceID - The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
	WorkspaceID *string `json:"workspaceId,omitempty"`
}

// DiagnosticSettingsCategory - The diagnostic settings Category.
type DiagnosticSettingsCategory struct {
	// CategoryType - The type of the diagnostic settings category. Possible values include: 'Metrics', 'Logs', 'None'
	CategoryType CategoryType `json:"categoryType,omitempty"`
}

// DiagnosticSettingsCategoryResource - The diagnostic settings category resource.
type DiagnosticSettingsCategoryResource struct {
	rawResponse *http.Response
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type                        *string `json:"type,omitempty"`
	*DiagnosticSettingsCategory `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (dscr DiagnosticSettingsCategoryResource) Response() *http.Response {
	return dscr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dscr DiagnosticSettingsCategoryResource) StatusCode() int {
	return dscr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dscr DiagnosticSettingsCategoryResource) Status() string {
	return dscr.rawResponse.Status
}

// DiagnosticSettingsCategoryResourceCollection - Represents a collection of diagnostic setting category resources.
type DiagnosticSettingsCategoryResourceCollection struct {
	rawResponse *http.Response
	// Value - The collection of diagnostic settings category resources.
	Value []DiagnosticSettingsCategoryResource `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (dscrc DiagnosticSettingsCategoryResourceCollection) Response() *http.Response {
	return dscrc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dscrc DiagnosticSettingsCategoryResourceCollection) StatusCode() int {
	return dscrc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dscrc DiagnosticSettingsCategoryResourceCollection) Status() string {
	return dscrc.rawResponse.Status
}

// DiagnosticSettingsResource - The diagnostic setting resource.
type DiagnosticSettingsResource struct {
	rawResponse *http.Response
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type                *string `json:"type,omitempty"`
	*DiagnosticSettings `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (dsr DiagnosticSettingsResource) Response() *http.Response {
	return dsr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dsr DiagnosticSettingsResource) StatusCode() int {
	return dsr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dsr DiagnosticSettingsResource) Status() string {
	return dsr.rawResponse.Status
}

// DiagnosticSettingsResourceCollection - Represents a collection of alert rule resources.
type DiagnosticSettingsResourceCollection struct {
	rawResponse *http.Response
	// Value - The collection of diagnostic settings resources;.
	Value []DiagnosticSettingsResource `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (dsrc DiagnosticSettingsResourceCollection) Response() *http.Response {
	return dsrc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dsrc DiagnosticSettingsResourceCollection) StatusCode() int {
	return dsrc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dsrc DiagnosticSettingsResourceCollection) Status() string {
	return dsrc.rawResponse.Status
}

// EmailNotification - Email notification of an autoscale event.
type EmailNotification struct {
	// SendToSubscriptionAdministrator - a value indicating whether to send email to subscription administrator.
	SendToSubscriptionAdministrator *bool `json:"sendToSubscriptionAdministrator,omitempty"`
	// SendToSubscriptionCoAdministrators - a value indicating whether to send email to subscription co-administrators.
	SendToSubscriptionCoAdministrators *bool `json:"sendToSubscriptionCoAdministrators,omitempty"`
	// CustomEmails - the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
	CustomEmails []string `json:"customEmails,omitempty"`
}

// EmailReceiver - An email receiver.
type EmailReceiver struct {
	// Name - The name of the email receiver. Names must be unique across all receivers within an action group.
	Name string `json:"name,omitempty"`
	// EmailAddress - The email address of this receiver.
	EmailAddress string `json:"emailAddress,omitempty"`
	// Status - The receiver status of the e-mail. Possible values include: 'NotSpecified', 'Enabled', 'Disabled', 'None'
	Status ReceiverStatusType `json:"status,omitempty"`
}

// EnableRequest - Describes a receiver that should be resubscribed.
type EnableRequest struct {
	// ReceiverName - The name of the receiver to resubscribe.
	ReceiverName string `json:"receiverName,omitempty"`
}

// ErrorResponse - Describes the format of Error response.
type ErrorResponse struct {
	// Code - Error code
	Code *string `json:"code,omitempty"`
	// Message - Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
}

// Incident - An alert incident indicates the activation status of an alert rule.
type Incident struct {
	rawResponse *http.Response
	// Name - Incident name.
	Name *string `json:"name,omitempty"`
	// RuleName - Rule name that is associated with the incident.
	RuleName *string `json:"ruleName,omitempty"`
	// IsActive - A boolean to indicate whether the incident is active or resolved.
	IsActive *bool `json:"isActive,omitempty"`
	// ActivatedTime - The time at which the incident was activated in ISO8601 format.
	ActivatedTime *time.Time `json:"activatedTime,omitempty"`
	// ResolvedTime - The time at which the incident was resolved in ISO8601 format. If null, it means the incident is still active.
	ResolvedTime *time.Time `json:"resolvedTime,omitempty"`
}

// Response returns the raw HTTP response object.
func (i Incident) Response() *http.Response {
	return i.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (i Incident) StatusCode() int {
	return i.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (i Incident) Status() string {
	return i.rawResponse.Status
}

// IncidentListResult - The List incidents operation response.
type IncidentListResult struct {
	rawResponse *http.Response
	// Value - the incident collection.
	Value []Incident `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (ilr IncidentListResult) Response() *http.Response {
	return ilr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ilr IncidentListResult) StatusCode() int {
	return ilr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ilr IncidentListResult) Status() string {
	return ilr.rawResponse.Status
}

// ItsmReceiver - An Itsm receiver.
type ItsmReceiver struct {
	// Name - The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `json:"name,omitempty"`
	// WorkspaceID - OMS LA instance identifier.
	WorkspaceID string `json:"workspaceId,omitempty"`
	// ConnectionID - Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionID string `json:"connectionId,omitempty"`
	// TicketConfiguration - JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `json:"ticketConfiguration,omitempty"`
	// Region - Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `json:"region,omitempty"`
}

// LocationThresholdRuleCondition - A rule condition based on a certain number of locations failing.
type LocationThresholdRuleCondition struct {
	// DataSource - the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource RuleDataSource `json:"dataSource,omitempty"`
	// OdataType - Possible values include: 'OdataTypeMicrosoftAzureManagementInsightsModelsThresholdRuleCondition', 'OdataTypeMicrosoftAzureManagementInsightsModelsLocationThresholdRuleCondition', 'OdataTypeMicrosoftAzureManagementInsightsModelsManagementEventRuleCondition'
	OdataType OdataType1Type `json:"odata.type,omitempty"`
	// WindowSize - the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
	WindowSize *string `json:"windowSize,omitempty"`
	// FailedLocationCount - the number of locations that must fail to activate the alert.
	FailedLocationCount int32 `json:"failedLocationCount,omitempty"`
}

// MarshalJSON is the custom marshaler for LocationThresholdRuleCondition.
func (ltrc LocationThresholdRuleCondition) MarshalJSON() ([]byte, error) {
	ltrc.OdataType = OdataTypeMicrosoftAzureManagementInsightsModelsLocationThresholdRuleCondition
	type Alias LocationThresholdRuleCondition
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ltrc),
	})
}

// AsThresholdRuleCondition is the RuleCondition implementation for LocationThresholdRuleCondition.
func (ltrc LocationThresholdRuleCondition) AsThresholdRuleCondition() (*ThresholdRuleCondition, bool) {
	return nil, false
}

// AsLocationThresholdRuleCondition is the RuleCondition implementation for LocationThresholdRuleCondition.
func (ltrc LocationThresholdRuleCondition) AsLocationThresholdRuleCondition() (*LocationThresholdRuleCondition, bool) {
	return &ltrc, true
}

// AsManagementEventRuleCondition is the RuleCondition implementation for LocationThresholdRuleCondition.
func (ltrc LocationThresholdRuleCondition) AsManagementEventRuleCondition() (*ManagementEventRuleCondition, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for LocationThresholdRuleCondition struct.
func (ltrc *LocationThresholdRuleCondition) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["windowSize"]
	if v != nil {
		var windowSize string
		err = json.Unmarshal(*m["windowSize"], &windowSize)
		if err != nil {
			return err
		}
		ltrc.WindowSize = &windowSize
	}

	v = m["failedLocationCount"]
	if v != nil {
		var failedLocationCount int32
		err = json.Unmarshal(*m["failedLocationCount"], &failedLocationCount)
		if err != nil {
			return err
		}
		ltrc.FailedLocationCount = &failedLocationCount
	}

	v = m["dataSource"]
	if v != nil {
		dataSource, err := unmarshalRuleDataSource(*m["dataSource"])
		if err != nil {
			return err
		}
		ltrc.DataSource = dataSource
	}

	v = m["odata.type"]
	if v != nil {
		var odatatype OdataType1Type
		err = json.Unmarshal(*m["odata.type"], &odatatype)
		if err != nil {
			return err
		}
		ltrc.OdataType = odatatype
	}

	return nil
}

// LogProfileCollection - Represents a collection of log profiles.
type LogProfileCollection struct {
	rawResponse *http.Response
	// Value - the values of the log profiles.
	Value []LogProfileResource `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (lpc LogProfileCollection) Response() *http.Response {
	return lpc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lpc LogProfileCollection) StatusCode() int {
	return lpc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lpc LogProfileCollection) Status() string {
	return lpc.rawResponse.Status
}

// LogProfileProperties - The log profile properties.
type LogProfileProperties struct {
	// StorageAccountID - the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountID *string `json:"storageAccountId,omitempty"`
	// ServiceBusRuleID - The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleID *string `json:"serviceBusRuleId,omitempty"`
	// Locations - List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations []string `json:"locations,omitempty"`
	// Categories - the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories []string `json:"categories,omitempty"`
	// RetentionPolicy - the retention policy for the events in the log.
	RetentionPolicy RetentionPolicy `json:"retentionPolicy,omitempty"`
}

// LogProfileResource - The log profile resource.
type LogProfileResource struct {
	rawResponse *http.Response
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The log profile properties of the resource.
	*LogProfileProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (lpr LogProfileResource) Response() *http.Response {
	return lpr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lpr LogProfileResource) StatusCode() int {
	return lpr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lpr LogProfileResource) Status() string {
	return lpr.rawResponse.Status
}

// LogProfileResourcePatch - The log profile resource for patch operations.
type LogProfileResourcePatch struct {
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The log profile properties for an update operation.
	*LogProfileProperties `json:"properties,omitempty"`
}

// LogSettings - Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettings struct {
	// Category - Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `json:"category,omitempty"`
	// Enabled - a value indicating whether this log is enabled.
	Enabled bool `json:"enabled,omitempty"`
	// RetentionPolicy - the retention policy for this log.
	RetentionPolicy *RetentionPolicy `json:"retentionPolicy,omitempty"`
}

// ManagementEventAggregationCondition - How the data that is collected should be combined over time.
type ManagementEventAggregationCondition struct {
	// Operator - the condition operator. Possible values include: 'GreaterThan', 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual', 'None'
	Operator ConditionOperatorType `json:"operator,omitempty"`
	// Threshold - The threshold value that activates the alert.
	Threshold *float64 `json:"threshold,omitempty"`
	// WindowSize - the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
	WindowSize *string `json:"windowSize,omitempty"`
}

// ManagementEventRuleCondition - A management event rule condition.
type ManagementEventRuleCondition struct {
	// DataSource - the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource RuleDataSource `json:"dataSource,omitempty"`
	// OdataType - Possible values include: 'OdataTypeMicrosoftAzureManagementInsightsModelsThresholdRuleCondition', 'OdataTypeMicrosoftAzureManagementInsightsModelsLocationThresholdRuleCondition', 'OdataTypeMicrosoftAzureManagementInsightsModelsManagementEventRuleCondition'
	OdataType OdataType1Type `json:"odata.type,omitempty"`
	// Aggregation - How the data that is collected should be combined over time and when the alert is activated. Note that for management event alerts aggregation is optional – if it is not provided then any event will cause the alert to activate.
	Aggregation *ManagementEventAggregationCondition `json:"aggregation,omitempty"`
}

// MarshalJSON is the custom marshaler for ManagementEventRuleCondition.
func (merc ManagementEventRuleCondition) MarshalJSON() ([]byte, error) {
	merc.OdataType = OdataTypeMicrosoftAzureManagementInsightsModelsManagementEventRuleCondition
	type Alias ManagementEventRuleCondition
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(merc),
	})
}

// AsThresholdRuleCondition is the RuleCondition implementation for ManagementEventRuleCondition.
func (merc ManagementEventRuleCondition) AsThresholdRuleCondition() (*ThresholdRuleCondition, bool) {
	return nil, false
}

// AsLocationThresholdRuleCondition is the RuleCondition implementation for ManagementEventRuleCondition.
func (merc ManagementEventRuleCondition) AsLocationThresholdRuleCondition() (*LocationThresholdRuleCondition, bool) {
	return nil, false
}

// AsManagementEventRuleCondition is the RuleCondition implementation for ManagementEventRuleCondition.
func (merc ManagementEventRuleCondition) AsManagementEventRuleCondition() (*ManagementEventRuleCondition, bool) {
	return &merc, true
}

// UnmarshalJSON is the custom unmarshaler for ManagementEventRuleCondition struct.
func (merc *ManagementEventRuleCondition) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["aggregation"]
	if v != nil {
		var aggregation ManagementEventAggregationCondition
		err = json.Unmarshal(*m["aggregation"], &aggregation)
		if err != nil {
			return err
		}
		merc.Aggregation = &aggregation
	}

	v = m["dataSource"]
	if v != nil {
		dataSource, err := unmarshalRuleDataSource(*m["dataSource"])
		if err != nil {
			return err
		}
		merc.DataSource = dataSource
	}

	v = m["odata.type"]
	if v != nil {
		var odatatype OdataType1Type
		err = json.Unmarshal(*m["odata.type"], &odatatype)
		if err != nil {
			return err
		}
		merc.OdataType = odatatype
	}

	return nil
}

// MetricSettings - Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettings struct {
	// TimeGrain - the timegrain of the metric in ISO8601 format.
	TimeGrain *string `json:"timeGrain,omitempty"`
	// Category - Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `json:"category,omitempty"`
	// Enabled - a value indicating whether this category is enabled.
	Enabled bool `json:"enabled,omitempty"`
	// RetentionPolicy - the retention policy for this category.
	RetentionPolicy *RetentionPolicy `json:"retentionPolicy,omitempty"`
}

// MetricTrigger - The trigger that results in a scaling action.
type MetricTrigger struct {
	// MetricName - the name of the metric that defines what the rule monitors.
	MetricName string `json:"metricName,omitempty"`
	// MetricResourceURI - the resource identifier of the resource the rule monitors.
	MetricResourceURI string `json:"metricResourceUri,omitempty"`
	// TimeGrain - the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
	TimeGrain string `json:"timeGrain,omitempty"`
	// Statistic - the metric statistic type. How the metrics from multiple instances are combined. Possible values include: 'Average', 'Min', 'Max', 'Sum', 'None'
	Statistic MetricStatisticType `json:"statistic,omitempty"`
	// TimeWindow - the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
	TimeWindow string `json:"timeWindow,omitempty"`
	// TimeAggregation - time aggregation type. How the data that is collected should be combined over time. The default value is Average. Possible values include: 'Average', 'Minimum', 'Maximum', 'Total', 'Count', 'None'
	TimeAggregation TimeAggregationType `json:"timeAggregation,omitempty"`
	// Operator - the operator that is used to compare the metric data and the threshold. Possible values include: 'Equals', 'NotEquals', 'GreaterThan', 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual', 'None'
	Operator ComparisonOperationType `json:"operator,omitempty"`
	// Threshold - the threshold of the metric that triggers the scale action.
	Threshold float64 `json:"threshold,omitempty"`
}

// Operation - Microsoft Insights API operation definition.
type Operation struct {
	// Name - Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
	// Display - Display metadata associated with the operation.
	Display *OperationDisplay `json:"display,omitempty"`
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// Provider - Service provider: Microsoft.Insights
	Provider *string `json:"provider,omitempty"`
	// Resource - Resource on which the operation is performed: AlertRules, Autoscale, etc.
	Resource *string `json:"resource,omitempty"`
	// Operation - Operation type: Read, write, delete, etc.
	Operation *string `json:"operation,omitempty"`
}

// OperationListResult - Result of the request to list Microsoft.Insights operations. It contains a list of operations
// and a URL link to get the next set of results.
type OperationListResult struct {
	rawResponse *http.Response
	// Value - List of operations supported by the Microsoft.Insights provider.
	Value []Operation `json:"value,omitempty"`
	// NextLink - URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (olr OperationListResult) Response() *http.Response {
	return olr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (olr OperationListResult) StatusCode() int {
	return olr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (olr OperationListResult) Status() string {
	return olr.rawResponse.Status
}

// ProxyOnlyResource - A proxy only azure resource object
type ProxyOnlyResource struct {
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type *string `json:"type,omitempty"`
}

// Recurrence - The repeating times at which this profile begins. This element is not used if the FixedDate element is
// used.
type Recurrence struct {
	// Frequency - the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. Possible values include: 'None', 'Second', 'Minute', 'Hour', 'Day', 'Week', 'Month', 'Year', 'None'
	Frequency RecurrenceFrequencyType `json:"frequency,omitempty"`
	// Schedule - the scheduling constraints for when the profile begins.
	Schedule RecurrentSchedule `json:"schedule,omitempty"`
}

// RecurrentSchedule - The scheduling constraints for when the profile begins.
type RecurrentSchedule struct {
	// TimeZone - the timezone for the hours of the profile. Some examples of valid timezones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone string `json:"timeZone,omitempty"`
	// Days - the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
	Days []string `json:"days,omitempty"`
	// Hours - A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
	Hours []int32 `json:"hours,omitempty"`
	// Minutes - A collection of minutes at which the profile takes effect at.
	Minutes []int32 `json:"minutes,omitempty"`
}

// Resource - An azure resource object
type Resource struct {
	// ID - Azure resource Id
	ID *string `json:"id,omitempty"`
	// Name - Azure resource name
	Name *string `json:"name,omitempty"`
	// Type - Azure resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
}

// RetentionPolicy - Specifies the retention policy for the log.
type RetentionPolicy struct {
	// Enabled - a value indicating whether the retention policy is enabled.
	Enabled bool `json:"enabled,omitempty"`
	// Days - the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int32 `json:"days,omitempty"`
}

type RuleAction interface {
	AsRuleEmailAction() (*RuleEmailAction, bool)
	AsRuleWebhookAction() (*RuleWebhookAction, bool)
}

func unmarshalRuleAction(body []byte) (RuleAction, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["odata.type"] {
	case string(OdataTypeMicrosoftAzureManagementInsightsModelsRuleEmailAction):
		var rea RuleEmailAction
		err := json.Unmarshal(body, &rea)
		return rea, err
	case string(OdataTypeMicrosoftAzureManagementInsightsModelsRuleWebhookAction):
		var rwa RuleWebhookAction
		err := json.Unmarshal(body, &rwa)
		return rwa, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalRuleActionArray(body []byte) ([]RuleAction, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	raArray := make([]RuleAction, len(rawMessages))

	for index, rawMessage := range rawMessages {
		ra, err := unmarshalRuleAction(*rawMessage)
		if err != nil {
			return nil, err
		}
		raArray[index] = ra
	}
	return raArray, nil
}

type RuleCondition interface {
	AsThresholdRuleCondition() (*ThresholdRuleCondition, bool)
	AsLocationThresholdRuleCondition() (*LocationThresholdRuleCondition, bool)
	AsManagementEventRuleCondition() (*ManagementEventRuleCondition, bool)
}

func unmarshalRuleCondition(body []byte) (RuleCondition, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["odata.type"] {
	case string(OdataTypeMicrosoftAzureManagementInsightsModelsThresholdRuleCondition):
		var trc ThresholdRuleCondition
		err := json.Unmarshal(body, &trc)
		return trc, err
	case string(OdataTypeMicrosoftAzureManagementInsightsModelsLocationThresholdRuleCondition):
		var ltrc LocationThresholdRuleCondition
		err := json.Unmarshal(body, &ltrc)
		return ltrc, err
	case string(OdataTypeMicrosoftAzureManagementInsightsModelsManagementEventRuleCondition):
		var merc ManagementEventRuleCondition
		err := json.Unmarshal(body, &merc)
		return merc, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalRuleConditionArray(body []byte) ([]RuleCondition, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	rcArray := make([]RuleCondition, len(rawMessages))

	for index, rawMessage := range rawMessages {
		rc, err := unmarshalRuleCondition(*rawMessage)
		if err != nil {
			return nil, err
		}
		rcArray[index] = rc
	}
	return rcArray, nil
}

type RuleDataSource interface {
	AsRuleMetricDataSource() (*RuleMetricDataSource, bool)
	AsRuleManagementEventDataSource() (*RuleManagementEventDataSource, bool)
}

func unmarshalRuleDataSource(body []byte) (RuleDataSource, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["odata.type"] {
	case string(OdataTypeMicrosoftAzureManagementInsightsModelsRuleMetricDataSource):
		var rmds RuleMetricDataSource
		err := json.Unmarshal(body, &rmds)
		return rmds, err
	case string(OdataTypeMicrosoftAzureManagementInsightsModelsRuleManagementEventDataSource):
		var rmeds RuleManagementEventDataSource
		err := json.Unmarshal(body, &rmeds)
		return rmeds, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalRuleDataSourceArray(body []byte) ([]RuleDataSource, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	rdsArray := make([]RuleDataSource, len(rawMessages))

	for index, rawMessage := range rawMessages {
		rds, err := unmarshalRuleDataSource(*rawMessage)
		if err != nil {
			return nil, err
		}
		rdsArray[index] = rds
	}
	return rdsArray, nil
}

// RuleEmailAction - Specifies the action to send email when the rule condition is evaluated. The discriminator is
// always RuleEmailAction in this case.
type RuleEmailAction struct {
	// OdataType - Possible values include: 'OdataTypeMicrosoftAzureManagementInsightsModelsRuleEmailAction', 'OdataTypeMicrosoftAzureManagementInsightsModelsRuleWebhookAction'
	OdataType OdataType1Type `json:"odata.type,omitempty"`
	// SendToServiceOwners - Whether the administrators (service and co-administrators) of the service should be notified when the alert is activated.
	SendToServiceOwners *bool `json:"sendToServiceOwners,omitempty"`
	// CustomEmails - the list of administrator's custom email addresses to notify of the activation of the alert.
	CustomEmails []string `json:"customEmails,omitempty"`
}

// MarshalJSON is the custom marshaler for RuleEmailAction.
func (rea RuleEmailAction) MarshalJSON() ([]byte, error) {
	rea.OdataType = OdataTypeMicrosoftAzureManagementInsightsModelsRuleEmailAction
	type Alias RuleEmailAction
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(rea),
	})
}

// AsRuleEmailAction is the RuleAction implementation for RuleEmailAction.
func (rea RuleEmailAction) AsRuleEmailAction() (*RuleEmailAction, bool) {
	return &rea, true
}

// AsRuleWebhookAction is the RuleAction implementation for RuleEmailAction.
func (rea RuleEmailAction) AsRuleWebhookAction() (*RuleWebhookAction, bool) {
	return nil, false
}

// RuleManagementEventClaimsDataSource - The claims for a rule management event data source.
type RuleManagementEventClaimsDataSource struct {
	// EmailAddress - the email address.
	EmailAddress *string `json:"emailAddress,omitempty"`
}

// RuleManagementEventDataSource - A rule management event data source. The discriminator fields is always
// RuleManagementEventDataSource in this case.
type RuleManagementEventDataSource struct {
	// ResourceURI - the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OdataType - Possible values include: 'OdataTypeMicrosoftAzureManagementInsightsModelsRuleMetricDataSource', 'OdataTypeMicrosoftAzureManagementInsightsModelsRuleManagementEventDataSource'
	OdataType OdataType `json:"odata.type,omitempty"`
	// EventName - the event name.
	EventName *string `json:"eventName,omitempty"`
	// EventSource - the event source.
	EventSource *string `json:"eventSource,omitempty"`
	// Level - the level.
	Level *string `json:"level,omitempty"`
	// OperationName - The name of the operation that should be checked for. If no name is provided, any operation will match.
	OperationName *string `json:"operationName,omitempty"`
	// ResourceGroupName - the resource group name.
	ResourceGroupName *string `json:"resourceGroupName,omitempty"`
	// ResourceProviderName - the resource provider name.
	ResourceProviderName *string `json:"resourceProviderName,omitempty"`
	// Status - The status of the operation that should be checked for. If no status is provided, any status will match.
	Status *string `json:"status,omitempty"`
	// SubStatus - the substatus.
	SubStatus *string `json:"subStatus,omitempty"`
	// Claims - the claims.
	Claims *RuleManagementEventClaimsDataSource `json:"claims,omitempty"`
}

// MarshalJSON is the custom marshaler for RuleManagementEventDataSource.
func (rmeds RuleManagementEventDataSource) MarshalJSON() ([]byte, error) {
	rmeds.OdataType = OdataTypeMicrosoftAzureManagementInsightsModelsRuleManagementEventDataSource
	type Alias RuleManagementEventDataSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(rmeds),
	})
}

// AsRuleMetricDataSource is the RuleDataSource implementation for RuleManagementEventDataSource.
func (rmeds RuleManagementEventDataSource) AsRuleMetricDataSource() (*RuleMetricDataSource, bool) {
	return nil, false
}

// AsRuleManagementEventDataSource is the RuleDataSource implementation for RuleManagementEventDataSource.
func (rmeds RuleManagementEventDataSource) AsRuleManagementEventDataSource() (*RuleManagementEventDataSource, bool) {
	return &rmeds, true
}

// RuleMetricDataSource - A rule metric data source. The discriminator value is always RuleMetricDataSource in this
// case.
type RuleMetricDataSource struct {
	// ResourceURI - the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OdataType - Possible values include: 'OdataTypeMicrosoftAzureManagementInsightsModelsRuleMetricDataSource', 'OdataTypeMicrosoftAzureManagementInsightsModelsRuleManagementEventDataSource'
	OdataType OdataType `json:"odata.type,omitempty"`
	// MetricName - the name of the metric that defines what the rule monitors.
	MetricName *string `json:"metricName,omitempty"`
}

// MarshalJSON is the custom marshaler for RuleMetricDataSource.
func (rmds RuleMetricDataSource) MarshalJSON() ([]byte, error) {
	rmds.OdataType = OdataTypeMicrosoftAzureManagementInsightsModelsRuleMetricDataSource
	type Alias RuleMetricDataSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(rmds),
	})
}

// AsRuleMetricDataSource is the RuleDataSource implementation for RuleMetricDataSource.
func (rmds RuleMetricDataSource) AsRuleMetricDataSource() (*RuleMetricDataSource, bool) {
	return &rmds, true
}

// AsRuleManagementEventDataSource is the RuleDataSource implementation for RuleMetricDataSource.
func (rmds RuleMetricDataSource) AsRuleManagementEventDataSource() (*RuleManagementEventDataSource, bool) {
	return nil, false
}

// RuleWebhookAction - Specifies the action to post to service when the rule condition is evaluated. The discriminator
// is always RuleWebhookAction in this case.
type RuleWebhookAction struct {
	// OdataType - Possible values include: 'OdataTypeMicrosoftAzureManagementInsightsModelsRuleEmailAction', 'OdataTypeMicrosoftAzureManagementInsightsModelsRuleWebhookAction'
	OdataType OdataType1Type `json:"odata.type,omitempty"`
	// ServiceURI - the service uri to Post the notification when the alert activates or resolves.
	ServiceURI *string `json:"serviceUri,omitempty"`
	// Properties - the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
	Properties map[string]string `json:"properties,omitempty"`
}

// MarshalJSON is the custom marshaler for RuleWebhookAction.
func (rwa RuleWebhookAction) MarshalJSON() ([]byte, error) {
	rwa.OdataType = OdataTypeMicrosoftAzureManagementInsightsModelsRuleWebhookAction
	type Alias RuleWebhookAction
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(rwa),
	})
}

// AsRuleEmailAction is the RuleAction implementation for RuleWebhookAction.
func (rwa RuleWebhookAction) AsRuleEmailAction() (*RuleEmailAction, bool) {
	return nil, false
}

// AsRuleWebhookAction is the RuleAction implementation for RuleWebhookAction.
func (rwa RuleWebhookAction) AsRuleWebhookAction() (*RuleWebhookAction, bool) {
	return &rwa, true
}

// ScaleAction - The parameters for the scaling action.
type ScaleAction struct {
	// Direction - the scale direction. Whether the scaling action increases or decreases the number of instances. Possible values include: 'None', 'Increase', 'Decrease', 'None'
	Direction ScaleDirectionType `json:"direction,omitempty"`
	// Type - the type of action that should occur when the scale rule fires. Possible values include: 'ChangeCount', 'PercentChangeCount', 'ExactCount', 'None'
	Type ScaleType `json:"type,omitempty"`
	// Value - the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
	Value *string `json:"value,omitempty"`
	// Cooldown - the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
	Cooldown string `json:"cooldown,omitempty"`
}

// ScaleCapacity - The number of instances that can be used during this profile.
type ScaleCapacity struct {
	// Minimum - the minimum number of instances for the resource.
	Minimum string `json:"minimum,omitempty"`
	// Maximum - the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.
	Maximum string `json:"maximum,omitempty"`
	// Default - the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.
	Default string `json:"default,omitempty"`
}

// ScaleRule - A rule that provide the triggers and parameters for the scaling action.
type ScaleRule struct {
	// MetricTrigger - the trigger that results in a scaling action.
	MetricTrigger MetricTrigger `json:"metricTrigger,omitempty"`
	// ScaleAction - the parameters for the scaling action.
	ScaleAction ScaleAction `json:"scaleAction,omitempty"`
}

// SmsReceiver - An SMS receiver.
type SmsReceiver struct {
	// Name - The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name string `json:"name,omitempty"`
	// CountryCode - The country code of the SMS receiver.
	CountryCode string `json:"countryCode,omitempty"`
	// PhoneNumber - The phone number of the SMS receiver.
	PhoneNumber string `json:"phoneNumber,omitempty"`
	// Status - The status of the receiver. Possible values include: 'NotSpecified', 'Enabled', 'Disabled', 'None'
	Status ReceiverStatusType `json:"status,omitempty"`
}

// ThresholdRuleCondition - A rule condition based on a metric crossing a threshold.
type ThresholdRuleCondition struct {
	// DataSource - the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource RuleDataSource `json:"dataSource,omitempty"`
	// OdataType - Possible values include: 'OdataTypeMicrosoftAzureManagementInsightsModelsThresholdRuleCondition', 'OdataTypeMicrosoftAzureManagementInsightsModelsLocationThresholdRuleCondition', 'OdataTypeMicrosoftAzureManagementInsightsModelsManagementEventRuleCondition'
	OdataType OdataType1Type `json:"odata.type,omitempty"`
	// Operator - the operator used to compare the data and the threshold. Possible values include: 'GreaterThan', 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual', 'None'
	Operator ConditionOperatorType `json:"operator,omitempty"`
	// Threshold - the threshold value that activates the alert.
	Threshold float64 `json:"threshold,omitempty"`
	// WindowSize - the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
	WindowSize *string `json:"windowSize,omitempty"`
	// TimeAggregation - the time aggregation operator. How the data that are collected should be combined over time. The default value is the PrimaryAggregationType of the Metric. Possible values include: 'Average', 'Minimum', 'Maximum', 'Total', 'Last', 'None'
	TimeAggregation TimeAggregationOperatorType `json:"timeAggregation,omitempty"`
}

// MarshalJSON is the custom marshaler for ThresholdRuleCondition.
func (trc ThresholdRuleCondition) MarshalJSON() ([]byte, error) {
	trc.OdataType = OdataTypeMicrosoftAzureManagementInsightsModelsThresholdRuleCondition
	type Alias ThresholdRuleCondition
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(trc),
	})
}

// AsThresholdRuleCondition is the RuleCondition implementation for ThresholdRuleCondition.
func (trc ThresholdRuleCondition) AsThresholdRuleCondition() (*ThresholdRuleCondition, bool) {
	return &trc, true
}

// AsLocationThresholdRuleCondition is the RuleCondition implementation for ThresholdRuleCondition.
func (trc ThresholdRuleCondition) AsLocationThresholdRuleCondition() (*LocationThresholdRuleCondition, bool) {
	return nil, false
}

// AsManagementEventRuleCondition is the RuleCondition implementation for ThresholdRuleCondition.
func (trc ThresholdRuleCondition) AsManagementEventRuleCondition() (*ManagementEventRuleCondition, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for ThresholdRuleCondition struct.
func (trc *ThresholdRuleCondition) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["operator"]
	if v != nil {
		var operator ConditionOperatorType
		err = json.Unmarshal(*m["operator"], &operator)
		if err != nil {
			return err
		}
		trc.Operator = operator
	}

	v = m["threshold"]
	if v != nil {
		var threshold float64
		err = json.Unmarshal(*m["threshold"], &threshold)
		if err != nil {
			return err
		}
		trc.Threshold = &threshold
	}

	v = m["windowSize"]
	if v != nil {
		var windowSize string
		err = json.Unmarshal(*m["windowSize"], &windowSize)
		if err != nil {
			return err
		}
		trc.WindowSize = &windowSize
	}

	v = m["timeAggregation"]
	if v != nil {
		var timeAggregation TimeAggregationOperatorType
		err = json.Unmarshal(*m["timeAggregation"], &timeAggregation)
		if err != nil {
			return err
		}
		trc.TimeAggregation = timeAggregation
	}

	v = m["dataSource"]
	if v != nil {
		dataSource, err := unmarshalRuleDataSource(*m["dataSource"])
		if err != nil {
			return err
		}
		trc.DataSource = dataSource
	}

	v = m["odata.type"]
	if v != nil {
		var odatatype OdataType1Type
		err = json.Unmarshal(*m["odata.type"], &odatatype)
		if err != nil {
			return err
		}
		trc.OdataType = odatatype
	}

	return nil
}

// TimeWindow - A specific date-time for the profile.
type TimeWindow struct {
	// TimeZone - the timezone of the start and end times for the profile. Some examples of valid timezones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone *string `json:"timeZone,omitempty"`
	// Start - the start time for the profile in ISO 8601 format.
	Start time.Time `json:"start,omitempty"`
	// End - the end time for the profile in ISO 8601 format.
	End time.Time `json:"end,omitempty"`
}

// WebhookNotification - Webhook notification of an autoscale event.
type WebhookNotification struct {
	// ServiceURI - the service address to receive the notification.
	ServiceURI *string `json:"serviceUri,omitempty"`
	// Properties - a property bag of settings. This value can be empty.
	Properties map[string]string `json:"properties,omitempty"`
}

// WebhookReceiver - A webhook receiver.
type WebhookReceiver struct {
	// Name - The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name string `json:"name,omitempty"`
	// ServiceURI - The URI where webhooks should be sent.
	ServiceURI string `json:"serviceUri,omitempty"`
}
