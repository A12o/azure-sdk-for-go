package insights

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type timeWindow struct {
	TimeZone *string     `json:"timeZone,omitempty"`
	Start    timeRFC3339 `json:"start,omitempty"`
	End      timeRFC3339 `json:"end,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for TimeWindow.
func (tw TimeWindow) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*TimeWindow)(nil)).Elem().Size() != reflect.TypeOf((*timeWindow)(nil)).Elem().Size() {
		panic("size mismatch between TimeWindow and timeWindow")
	}
	tw2 := (*timeWindow)(unsafe.Pointer(&tw))
	return e.EncodeElement(*tw2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for TimeWindow.
func (tw *TimeWindow) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*TimeWindow)(nil)).Elem().Size() != reflect.TypeOf((*timeWindow)(nil)).Elem().Size() {
		panic("size mismatch between TimeWindow and timeWindow")
	}
	tw2 := (*timeWindow)(unsafe.Pointer(tw))
	return d.DecodeElement(tw2, &start)
}

// internal type used for marshalling
type incident struct {
	Name          *string      `json:"name,omitempty"`
	RuleName      *string      `json:"ruleName,omitempty"`
	IsActive      *bool        `json:"isActive,omitempty"`
	ActivatedTime *timeRFC3339 `json:"activatedTime,omitempty"`
	ResolvedTime  *timeRFC3339 `json:"resolvedTime,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for Incident.
func (i Incident) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*Incident)(nil)).Elem().Size() != reflect.TypeOf((*incident)(nil)).Elem().Size() {
		panic("size mismatch between Incident and incident")
	}
	i2 := (*incident)(unsafe.Pointer(&i))
	return e.EncodeElement(*i2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for Incident.
func (i *Incident) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*Incident)(nil)).Elem().Size() != reflect.TypeOf((*incident)(nil)).Elem().Size() {
		panic("size mismatch between Incident and incident")
	}
	i2 := (*incident)(unsafe.Pointer(i))
	return d.DecodeElement(i2, &start)
}

// internal type used for marshalling
type alertRule struct {
	Name            string        `json:"name,omitempty"`
	Description     *string       `json:"description,omitempty"`
	IsEnabled       bool          `json:"isEnabled,omitempty"`
	Condition       RuleCondition `json:"condition,omitempty"`
	Actions         []RuleAction  `json:"actions,omitempty"`
	LastUpdatedTime *timeRFC3339  `json:"lastUpdatedTime,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for AlertRule.
func (ar AlertRule) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*AlertRule)(nil)).Elem().Size() != reflect.TypeOf((*alertRule)(nil)).Elem().Size() {
		panic("size mismatch between AlertRule and alertRule")
	}
	ar2 := (*alertRule)(unsafe.Pointer(&ar))
	return e.EncodeElement(*ar2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for AlertRule.
func (ar *AlertRule) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*AlertRule)(nil)).Elem().Size() != reflect.TypeOf((*alertRule)(nil)).Elem().Size() {
		panic("size mismatch between AlertRule and alertRule")
	}
	ar2 := (*alertRule)(unsafe.Pointer(ar))
	return d.DecodeElement(ar2, &start)
}
