package insights

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// CreateClient is the composite Swagger for Application Insights Management Client
type CreateClient struct {
	BaseClient
}

// NewCreateClient creates an instance of the CreateClient client.
func NewCreateClient(subscriptionID string) CreateClient {
	return NewCreateClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewCreateClientWithBaseURI creates an instance of the CreateClient client.
func NewCreateClientWithBaseURI(baseURI string, subscriptionID string) CreateClient {
	return CreateClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// APIKeys create an API Key of an Application Insights component.
//
// resourceGroupName is the name of the resource group. resourceName is the name of the Application Insights component
// resource. APIKeyProperties is properties that need to be specified to create an API key of a Application Insights
// component.
func (client CreateClient) APIKeys(ctx context.Context, resourceGroupName string, resourceName string, APIKeyProperties APIKeyRequest) (result ApplicationInsightsComponentAPIKey, err error) {
	req, err := client.APIKeysPreparer(ctx, resourceGroupName, resourceName, APIKeyProperties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.CreateClient", "APIKeys", nil, "Failure preparing request")
		return
	}

	resp, err := client.APIKeysSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "insights.CreateClient", "APIKeys", resp, "Failure sending request")
		return
	}

	result, err = client.APIKeysResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.CreateClient", "APIKeys", resp, "Failure responding to request")
	}

	return
}

// APIKeysPreparer prepares the APIKeys request.
func (client CreateClient) APIKeysPreparer(ctx context.Context, resourceGroupName string, resourceName string, APIKeyProperties APIKeyRequest) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2015-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/ApiKeys", pathParameters),
		autorest.WithJSON(APIKeyProperties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// APIKeysSender sends the APIKeys request. The method will close the
// http.Response Body if it receives an error.
func (client CreateClient) APIKeysSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// APIKeysResponder handles the response to the APIKeys request. The method always
// closes the http.Response Body.
func (client CreateClient) APIKeysResponder(resp *http.Response) (result ApplicationInsightsComponentAPIKey, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ExportConfigurationsMethod create a Continuous Export configuration of an Application Insights component.
//
// resourceGroupName is the name of the resource group. resourceName is the name of the Application Insights component
// resource. exportProperties is properties that need to be specified to create a Continuous Export configuration of a
// Application Insights component.
func (client CreateClient) ExportConfigurationsMethod(ctx context.Context, resourceGroupName string, resourceName string, exportProperties ApplicationInsightsComponentExportRequest) (result ListApplicationInsightsComponentExportConfiguration, err error) {
	req, err := client.ExportConfigurationsMethodPreparer(ctx, resourceGroupName, resourceName, exportProperties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.CreateClient", "ExportConfigurationsMethod", nil, "Failure preparing request")
		return
	}

	resp, err := client.ExportConfigurationsMethodSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "insights.CreateClient", "ExportConfigurationsMethod", resp, "Failure sending request")
		return
	}

	result, err = client.ExportConfigurationsMethodResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.CreateClient", "ExportConfigurationsMethod", resp, "Failure responding to request")
	}

	return
}

// ExportConfigurationsMethodPreparer prepares the ExportConfigurationsMethod request.
func (client CreateClient) ExportConfigurationsMethodPreparer(ctx context.Context, resourceGroupName string, resourceName string, exportProperties ApplicationInsightsComponentExportRequest) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2015-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/exportconfiguration", pathParameters),
		autorest.WithJSON(exportProperties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ExportConfigurationsMethodSender sends the ExportConfigurationsMethod request. The method will close the
// http.Response Body if it receives an error.
func (client CreateClient) ExportConfigurationsMethodSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ExportConfigurationsMethodResponder handles the response to the ExportConfigurationsMethod request. The method always
// closes the http.Response Body.
func (client CreateClient) ExportConfigurationsMethodResponder(resp *http.Response) (result ListApplicationInsightsComponentExportConfiguration, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
