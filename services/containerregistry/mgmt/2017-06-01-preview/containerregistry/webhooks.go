package containerregistry

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io/ioutil"
	"net/http"
)

// WebhooksClient is the client for the Webhooks methods of the Containerregistry service.
type WebhooksClient struct {
	ManagementClient
}

// NewWebhooksClient creates an instance of the WebhooksClient client.
func NewWebhooksClient(p pipeline.Pipeline) WebhooksClient {
	return WebhooksClient{NewManagementClient(p)}
}

// Create creates a webhook for a container registry with the specified parameters. This method may poll for
// completion. Polling can be canceled by passing the cancel channel argument. The channel will be used to cancel
// polling and any outstanding HTTP requests.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. webhookName is the name of the webhook. webhookCreateParameters is the parameters
// for creating a webhook.
func (client WebhooksClient) Create(ctx context.Context, resourceGroupName string, registryName string, webhookName string, webhookCreateParameters WebhookCreateParameters) (*Webhook, error) {
	if err := validate([]validation{
		{targetValue: registryName,
			constraints: []constraint{{target: "registryName", name: maxLength, rule: 50, chain: nil},
				{target: "registryName", name: minLength, rule: 5, chain: nil},
				{target: "registryName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}},
		{targetValue: webhookName,
			constraints: []constraint{{target: "webhookName", name: maxLength, rule: 50, chain: nil},
				{target: "webhookName", name: minLength, rule: 5, chain: nil},
				{target: "webhookName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}},
		{targetValue: webhookCreateParameters,
			constraints: []constraint{{target: "webhookCreateParameters.Location", name: null, rule: true, chain: nil},
				{target: "webhookCreateParameters.WebhookPropertiesCreateParameters", name: null, rule: false,
					chain: []constraint{{target: "webhookCreateParameters.WebhookPropertiesCreateParameters.ServiceURI", name: null, rule: true, chain: nil},
						{target: "webhookCreateParameters.WebhookPropertiesCreateParameters.Actions", name: null, rule: true, chain: nil},
					}}}}}); err != nil {
		return nil, err
	}
	req, err := client.createPreparer(resourceGroupName, registryName, webhookName, webhookCreateParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.createResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Webhook), err
}

// createPreparer prepares the Create request.
func (client WebhooksClient) createPreparer(resourceGroupName string, registryName string, webhookName string, webhookCreateParameters WebhookCreateParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(webhookCreateParameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// createResponder handles the response to the Create request.
func (client WebhooksClient) createResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &Webhook{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Delete deletes a webhook from a container registry. This method may poll for completion. Polling can be canceled by
// passing the cancel channel argument. The channel will be used to cancel polling and any outstanding HTTP requests.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. webhookName is the name of the webhook.
func (client WebhooksClient) Delete(ctx context.Context, resourceGroupName string, registryName string, webhookName string) (*http.Response, error) {
	if err := validate([]validation{
		{targetValue: registryName,
			constraints: []constraint{{target: "registryName", name: maxLength, rule: 50, chain: nil},
				{target: "registryName", name: minLength, rule: 5, chain: nil},
				{target: "registryName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}},
		{targetValue: webhookName,
			constraints: []constraint{{target: "webhookName", name: maxLength, rule: 50, chain: nil},
				{target: "webhookName", name: minLength, rule: 5, chain: nil},
				{target: "webhookName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.deletePreparer(resourceGroupName, registryName, webhookName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// deletePreparer prepares the Delete request.
func (client WebhooksClient) deletePreparer(resourceGroupName string, registryName string, webhookName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// deleteResponder handles the response to the Delete request.
func (client WebhooksClient) deleteResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Get gets the properties of the specified webhook.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. webhookName is the name of the webhook.
func (client WebhooksClient) Get(ctx context.Context, resourceGroupName string, registryName string, webhookName string) (*Webhook, error) {
	if err := validate([]validation{
		{targetValue: registryName,
			constraints: []constraint{{target: "registryName", name: maxLength, rule: 50, chain: nil},
				{target: "registryName", name: minLength, rule: 5, chain: nil},
				{target: "registryName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}},
		{targetValue: webhookName,
			constraints: []constraint{{target: "webhookName", name: maxLength, rule: 50, chain: nil},
				{target: "webhookName", name: minLength, rule: 5, chain: nil},
				{target: "webhookName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.getPreparer(resourceGroupName, registryName, webhookName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Webhook), err
}

// getPreparer prepares the Get request.
func (client WebhooksClient) getPreparer(resourceGroupName string, registryName string, webhookName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getResponder handles the response to the Get request.
func (client WebhooksClient) getResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Webhook{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetCallbackConfig gets the configuration of service URI and custom headers for the webhook.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. webhookName is the name of the webhook.
func (client WebhooksClient) GetCallbackConfig(ctx context.Context, resourceGroupName string, registryName string, webhookName string) (*CallbackConfig, error) {
	if err := validate([]validation{
		{targetValue: registryName,
			constraints: []constraint{{target: "registryName", name: maxLength, rule: 50, chain: nil},
				{target: "registryName", name: minLength, rule: 5, chain: nil},
				{target: "registryName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}},
		{targetValue: webhookName,
			constraints: []constraint{{target: "webhookName", name: maxLength, rule: 50, chain: nil},
				{target: "webhookName", name: minLength, rule: 5, chain: nil},
				{target: "webhookName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.getCallbackConfigPreparer(resourceGroupName, registryName, webhookName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getCallbackConfigResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*CallbackConfig), err
}

// getCallbackConfigPreparer prepares the GetCallbackConfig request.
func (client WebhooksClient) getCallbackConfigPreparer(resourceGroupName string, registryName string, webhookName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getCallbackConfigResponder handles the response to the GetCallbackConfig request.
func (client WebhooksClient) getCallbackConfigResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &CallbackConfig{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List lists all the webhooks for the specified container registry.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry.
func (client WebhooksClient) List(ctx context.Context, resourceGroupName string, registryName string) (*WebhookListResult, error) {
	if err := validate([]validation{
		{targetValue: registryName,
			constraints: []constraint{{target: "registryName", name: maxLength, rule: 50, chain: nil},
				{target: "registryName", name: minLength, rule: 5, chain: nil},
				{target: "registryName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.listPreparer(resourceGroupName, registryName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*WebhookListResult), err
}

// listPreparer prepares the List request.
func (client WebhooksClient) listPreparer(resourceGroupName string, registryName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listResponder handles the response to the List request.
func (client WebhooksClient) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &WebhookListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListEvents lists recent events for the specified webhook.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. webhookName is the name of the webhook.
func (client WebhooksClient) ListEvents(ctx context.Context, resourceGroupName string, registryName string, webhookName string) (*EventListResult, error) {
	if err := validate([]validation{
		{targetValue: registryName,
			constraints: []constraint{{target: "registryName", name: maxLength, rule: 50, chain: nil},
				{target: "registryName", name: minLength, rule: 5, chain: nil},
				{target: "registryName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}},
		{targetValue: webhookName,
			constraints: []constraint{{target: "webhookName", name: maxLength, rule: 50, chain: nil},
				{target: "webhookName", name: minLength, rule: 5, chain: nil},
				{target: "webhookName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.listEventsPreparer(resourceGroupName, registryName, webhookName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listEventsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*EventListResult), err
}

// listEventsPreparer prepares the ListEvents request.
func (client WebhooksClient) listEventsPreparer(resourceGroupName string, registryName string, webhookName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listEventsResponder handles the response to the ListEvents request.
func (client WebhooksClient) listEventsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &EventListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Ping triggers a ping event to be sent to the webhook.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. webhookName is the name of the webhook.
func (client WebhooksClient) Ping(ctx context.Context, resourceGroupName string, registryName string, webhookName string) (*EventInfo, error) {
	if err := validate([]validation{
		{targetValue: registryName,
			constraints: []constraint{{target: "registryName", name: maxLength, rule: 50, chain: nil},
				{target: "registryName", name: minLength, rule: 5, chain: nil},
				{target: "registryName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}},
		{targetValue: webhookName,
			constraints: []constraint{{target: "webhookName", name: maxLength, rule: 50, chain: nil},
				{target: "webhookName", name: minLength, rule: 5, chain: nil},
				{target: "webhookName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.pingPreparer(resourceGroupName, registryName, webhookName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.pingResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*EventInfo), err
}

// pingPreparer prepares the Ping request.
func (client WebhooksClient) pingPreparer(resourceGroupName string, registryName string, webhookName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// pingResponder handles the response to the Ping request.
func (client WebhooksClient) pingResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &EventInfo{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Update updates a webhook with the specified parameters. This method may poll for completion. Polling can be canceled
// by passing the cancel channel argument. The channel will be used to cancel polling and any outstanding HTTP
// requests.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. webhookName is the name of the webhook. webhookUpdateParameters is the parameters
// for updating a webhook.
func (client WebhooksClient) Update(ctx context.Context, resourceGroupName string, registryName string, webhookName string, webhookUpdateParameters WebhookUpdateParameters) (*Webhook, error) {
	if err := validate([]validation{
		{targetValue: registryName,
			constraints: []constraint{{target: "registryName", name: maxLength, rule: 50, chain: nil},
				{target: "registryName", name: minLength, rule: 5, chain: nil},
				{target: "registryName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}},
		{targetValue: webhookName,
			constraints: []constraint{{target: "webhookName", name: maxLength, rule: 50, chain: nil},
				{target: "webhookName", name: minLength, rule: 5, chain: nil},
				{target: "webhookName", name: pattern, rule: `^[a-zA-Z0-9]*$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.updatePreparer(resourceGroupName, registryName, webhookName, webhookUpdateParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.updateResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Webhook), err
}

// updatePreparer prepares the Update request.
func (client WebhooksClient) updatePreparer(resourceGroupName string, registryName string, webhookName string, webhookUpdateParameters WebhookUpdateParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(webhookUpdateParameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// updateResponder handles the response to the Update request.
func (client WebhooksClient) updateResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &Webhook{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
