package containerregistry

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// PasswordNameType enumerates the values for password name.
type PasswordNameType string

const (
	// PasswordNameNone represents an empty PasswordNameType.
	PasswordNameNone PasswordNameType = ""
	// PasswordNamePassword ...
	PasswordNamePassword PasswordNameType = "password"
	// PasswordNamePassword2 ...
	PasswordNamePassword2 PasswordNameType = "password2"
)

// ProvisioningStateType enumerates the values for provisioning state.
type ProvisioningStateType string

const (
	// ProvisioningStateCanceled ...
	ProvisioningStateCanceled ProvisioningStateType = "Canceled"
	// ProvisioningStateCreating ...
	ProvisioningStateCreating ProvisioningStateType = "Creating"
	// ProvisioningStateDeleting ...
	ProvisioningStateDeleting ProvisioningStateType = "Deleting"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningStateType = "Failed"
	// ProvisioningStateNone represents an empty ProvisioningStateType.
	ProvisioningStateNone ProvisioningStateType = ""
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningStateType = "Succeeded"
	// ProvisioningStateUpdating ...
	ProvisioningStateUpdating ProvisioningStateType = "Updating"
)

// RegistryUsageUnitType enumerates the values for registry usage unit.
type RegistryUsageUnitType string

const (
	// RegistryUsageUnitBytes ...
	RegistryUsageUnitBytes RegistryUsageUnitType = "Bytes"
	// RegistryUsageUnitCount ...
	RegistryUsageUnitCount RegistryUsageUnitType = "Count"
	// RegistryUsageUnitNone represents an empty RegistryUsageUnitType.
	RegistryUsageUnitNone RegistryUsageUnitType = ""
)

// SkuNameType enumerates the values for sku name.
type SkuNameType string

const (
	// SkuNameBasic ...
	SkuNameBasic SkuNameType = "Basic"
	// SkuNameManagedBasic ...
	SkuNameManagedBasic SkuNameType = "Managed_Basic"
	// SkuNameManagedPremium ...
	SkuNameManagedPremium SkuNameType = "Managed_Premium"
	// SkuNameManagedStandard ...
	SkuNameManagedStandard SkuNameType = "Managed_Standard"
	// SkuNameNone represents an empty SkuNameType.
	SkuNameNone SkuNameType = ""
)

// SkuTierType enumerates the values for sku tier.
type SkuTierType string

const (
	// SkuTierBasic ...
	SkuTierBasic SkuTierType = "Basic"
	// SkuTierManaged ...
	SkuTierManaged SkuTierType = "Managed"
	// SkuTierNone represents an empty SkuTierType.
	SkuTierNone SkuTierType = ""
)

// WebhookActionType enumerates the values for webhook action.
type WebhookActionType string

const (
	// WebhookActionDelete ...
	WebhookActionDelete WebhookActionType = "delete"
	// WebhookActionNone represents an empty WebhookActionType.
	WebhookActionNone WebhookActionType = ""
	// WebhookActionPush ...
	WebhookActionPush WebhookActionType = "push"
)

// WebhookStatusType enumerates the values for webhook status.
type WebhookStatusType string

const (
	// WebhookStatusDisabled ...
	WebhookStatusDisabled WebhookStatusType = "disabled"
	// WebhookStatusEnabled ...
	WebhookStatusEnabled WebhookStatusType = "enabled"
	// WebhookStatusNone represents an empty WebhookStatusType.
	WebhookStatusNone WebhookStatusType = ""
)

// Actor - The agent that initiated the event. For most situations, this could be from the authorization context of the
// request.
type Actor struct {
	// Name - The subject or username associated with the request context that generated the event.
	Name *string `json:"name,omitempty"`
}

// CallbackConfig - The configuration of service URI and custom headers for the webhook.
type CallbackConfig struct {
	rawResponse *http.Response
	// ServiceURI - The service URI for the webhook to post notifications.
	ServiceURI string `json:"serviceUri,omitempty"`
	// CustomHeaders - Custom headers that will be added to the webhook notifications.
	CustomHeaders map[string]string `json:"customHeaders,omitempty"`
}

// Response returns the raw HTTP response object.
func (cc CallbackConfig) Response() *http.Response {
	return cc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (cc CallbackConfig) StatusCode() int {
	return cc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (cc CallbackConfig) Status() string {
	return cc.rawResponse.Status
}

// Event - The event for a webhook.
type Event struct {
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
	// EventRequestMessage - The event request message sent to the service URI.
	EventRequestMessage *EventRequestMessage `json:"eventRequestMessage,omitempty"`
	// EventResponseMessage - The event response message received from the service URI.
	EventResponseMessage *EventResponseMessage `json:"eventResponseMessage,omitempty"`
}

// EventContent - The content of the event request message.
type EventContent struct {
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
	// Timestamp - The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Action - The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`
	// Target - The target of the event.
	Target *Target `json:"target,omitempty"`
	// Request - The request that generated the event.
	Request *Request `json:"request,omitempty"`
	// Actor - The agent that initiated the event. For most situations, this could be from the authorization context of the request.
	Actor *Actor `json:"actor,omitempty"`
	// Source - The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
	Source *Source `json:"source,omitempty"`
}

// EventInfo - The basic information of an event.
type EventInfo struct {
	rawResponse *http.Response
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
}

// Response returns the raw HTTP response object.
func (ei EventInfo) Response() *http.Response {
	return ei.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ei EventInfo) StatusCode() int {
	return ei.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ei EventInfo) Status() string {
	return ei.rawResponse.Status
}

// EventListResult - The result of a request to list events for a webhook.
type EventListResult struct {
	rawResponse *http.Response
	// Value - The list of events. Since this list may be incomplete, the nextLink field should be used to request the next list of events.
	Value []Event `json:"value,omitempty"`
	// NextLink - The URI that can be used to request the next list of events.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (elr EventListResult) Response() *http.Response {
	return elr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (elr EventListResult) StatusCode() int {
	return elr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (elr EventListResult) Status() string {
	return elr.rawResponse.Status
}

// EventRequestMessage - The event request message sent to the service URI.
type EventRequestMessage struct {
	// Content - The content of the event request message.
	Content *EventContent `json:"content,omitempty"`
	// Headers - The headers of the event request message.
	Headers map[string]string `json:"headers,omitempty"`
	// Method - The HTTP method used to send the event request message.
	Method *string `json:"method,omitempty"`
	// RequestURI - The URI used to send the event request message.
	RequestURI *string `json:"requestUri,omitempty"`
	// Version - The HTTP message version.
	Version *string `json:"version,omitempty"`
}

// EventResponseMessage - The event response message received from the service URI.
type EventResponseMessage struct {
	// Content - The content of the event response message.
	Content *string `json:"content,omitempty"`
	// Headers - The headers of the event response message.
	Headers map[string]string `json:"headers,omitempty"`
	// ReasonPhrase - The reason phrase of the event response message.
	ReasonPhrase *string `json:"reasonPhrase,omitempty"`
	// StatusCode - The status code of the event response message.
	StatusCode *string `json:"statusCode,omitempty"`
	// Version - The HTTP message version.
	Version *string `json:"version,omitempty"`
}

// OperationDefinition - The definition of a container registry operation.
type OperationDefinition struct {
	// Name - Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty"`
	// Display - The display information for the container registry operation.
	Display *OperationDisplayDefinition `json:"display,omitempty"`
}

// OperationDisplayDefinition - The display information for a container registry operation.
type OperationDisplayDefinition struct {
	// Provider - The resource provider name: Microsoft.ContainerRegistry.
	Provider *string `json:"provider,omitempty"`
	// Resource - The resource on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
	// Operation - The operation that users can perform.
	Operation *string `json:"operation,omitempty"`
	// Description - The description for the operation.
	Description *string `json:"description,omitempty"`
}

// OperationListResult - The result of a request to list container registry operations.
type OperationListResult struct {
	rawResponse *http.Response
	// Value - The list of container registry operations. Since this list may be incomplete, the nextLink field should be used to request the next list of operations.
	Value []OperationDefinition `json:"value,omitempty"`
	// NextLink - The URI that can be used to request the next list of container registry operations.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (olr OperationListResult) Response() *http.Response {
	return olr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (olr OperationListResult) StatusCode() int {
	return olr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (olr OperationListResult) Status() string {
	return olr.rawResponse.Status
}

// RegenerateCredentialParameters - The parameters used to regenerate the login credential.
type RegenerateCredentialParameters struct {
	// Name - Specifies name of the password which should be regenerated -- password or password2. Possible values include: 'Password', 'Password2', 'None'
	Name PasswordNameType `json:"name,omitempty"`
}

// Registry - An object that represents a container registry.
type Registry struct {
	rawResponse *http.Response
	// ID - The resource ID.
	ID *string `json:"id,omitempty"`
	// Name - The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - The type of the resource.
	Type *string `json:"type,omitempty"`
	// Location - The location of the resource. This cannot be changed after the resource is created.
	Location string `json:"location,omitempty"`
	// Tags - The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`
	// Sku - The SKU of the container registry.
	Sku Sku `json:"sku,omitempty"`
	// Properties - The properties of the container registry.
	*RegistryProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (r Registry) Response() *http.Response {
	return r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (r Registry) StatusCode() int {
	return r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (r Registry) Status() string {
	return r.rawResponse.Status
}

// RegistryListCredentialsResult - The response from the ListCredentials operation.
type RegistryListCredentialsResult struct {
	rawResponse *http.Response
	// Username - The username for a container registry.
	Username *string `json:"username,omitempty"`
	// Passwords - The list of passwords for a container registry.
	Passwords []RegistryPassword `json:"passwords,omitempty"`
}

// Response returns the raw HTTP response object.
func (rlcr RegistryListCredentialsResult) Response() *http.Response {
	return rlcr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rlcr RegistryListCredentialsResult) StatusCode() int {
	return rlcr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rlcr RegistryListCredentialsResult) Status() string {
	return rlcr.rawResponse.Status
}

// RegistryListResult - The result of a request to list container registries.
type RegistryListResult struct {
	rawResponse *http.Response
	// Value - The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries.
	Value []Registry `json:"value,omitempty"`
	// NextLink - The URI that can be used to request the next list of container registries.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rlr RegistryListResult) Response() *http.Response {
	return rlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rlr RegistryListResult) StatusCode() int {
	return rlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rlr RegistryListResult) Status() string {
	return rlr.rawResponse.Status
}

// RegistryNameCheckRequest - A request to check whether a container registry name is available.
type RegistryNameCheckRequest struct {
	// Name - The name of the container registry.
	Name string `json:"name,omitempty"`
	// Type - The resource type of the container registry. This field must be set to 'Microsoft.ContainerRegistry/registries'.
	Type string `json:"type,omitempty"`
}

// RegistryNameStatus - The result of a request to check the availability of a container registry name.
type RegistryNameStatus struct {
	rawResponse *http.Response
	// NameAvailable - The value that indicates whether the name is available.
	NameAvailable *bool `json:"nameAvailable,omitempty"`
	// Reason - If any, the reason that the name is not available.
	Reason *string `json:"reason,omitempty"`
	// Message - If any, the error message that provides more detail for the reason that the name is not available.
	Message *string `json:"message,omitempty"`
}

// Response returns the raw HTTP response object.
func (rns RegistryNameStatus) Response() *http.Response {
	return rns.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rns RegistryNameStatus) StatusCode() int {
	return rns.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rns RegistryNameStatus) Status() string {
	return rns.rawResponse.Status
}

// RegistryPassword - The login password for the container registry.
type RegistryPassword struct {
	// Name - The password name. Possible values include: 'Password', 'Password2', 'None'
	Name PasswordNameType `json:"name,omitempty"`
	// Value - The password value.
	Value *string `json:"value,omitempty"`
}

// RegistryProperties - The properties of a container registry.
type RegistryProperties struct {
	// LoginServer - The URL that can be used to log into the container registry.
	LoginServer *string `json:"loginServer,omitempty"`
	// CreationDate - The creation date of the container registry in ISO8601 format.
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// ProvisioningState - The provisioning state of the container registry at the time the operation was called. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled', 'None'
	ProvisioningState ProvisioningStateType `json:"provisioningState,omitempty"`
	// Status - The status of the container registry at the time the operation was called.
	Status *Status `json:"status,omitempty"`
	// AdminUserEnabled - The value that indicates whether the admin user is enabled.
	AdminUserEnabled *bool `json:"adminUserEnabled,omitempty"`
	// StorageAccount - The properties of the storage account for the container registry. Only applicable to Basic SKU.
	StorageAccount *StorageAccountProperties `json:"storageAccount,omitempty"`
}

// RegistryPropertiesUpdateParameters - The parameters for updating the properties of a container registry.
type RegistryPropertiesUpdateParameters struct {
	// AdminUserEnabled - The value that indicates whether the admin user is enabled.
	AdminUserEnabled *bool `json:"adminUserEnabled,omitempty"`
	// StorageAccount - The parameters of a storage account for the container registry. Only applicable to Basic SKU. If specified, the storage account must be in the same physical location as the container registry.
	StorageAccount *StorageAccountProperties `json:"storageAccount,omitempty"`
}

// RegistryUpdateParameters - The parameters for updating a container registry.
type RegistryUpdateParameters struct {
	// Tags - The tags for the container registry.
	Tags map[string]string `json:"tags,omitempty"`
	// Sku - The SKU of the container registry.
	Sku *Sku `json:"sku,omitempty"`
	// Properties - The properties that the container registry will be updated with.
	*RegistryPropertiesUpdateParameters `json:"properties,omitempty"`
}

// RegistryUsage - The quota usage for a container registry.
type RegistryUsage struct {
	// Name - The name of the usage.
	Name *string `json:"name,omitempty"`
	// Limit - The limit of the usage.
	Limit *int64 `json:"limit,omitempty"`
	// CurrentValue - The current value of the usage.
	CurrentValue *int64 `json:"currentValue,omitempty"`
	// Unit - The unit of measurement. Possible values include: 'Count', 'Bytes', 'None'
	Unit RegistryUsageUnitType `json:"unit,omitempty"`
}

// RegistryUsageListResult - The result of a request to get container registry quota usages.
type RegistryUsageListResult struct {
	rawResponse *http.Response
	// Value - The list of container registry quota usages.
	Value []RegistryUsage `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (rulr RegistryUsageListResult) Response() *http.Response {
	return rulr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rulr RegistryUsageListResult) StatusCode() int {
	return rulr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rulr RegistryUsageListResult) Status() string {
	return rulr.rawResponse.Status
}

// Replication - An object that represents a replication for a container registry.
type Replication struct {
	rawResponse *http.Response
	// ID - The resource ID.
	ID *string `json:"id,omitempty"`
	// Name - The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - The type of the resource.
	Type *string `json:"type,omitempty"`
	// Location - The location of the resource. This cannot be changed after the resource is created.
	Location string `json:"location,omitempty"`
	// Tags - The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties of the replication.
	*ReplicationProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (r Replication) Response() *http.Response {
	return r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (r Replication) StatusCode() int {
	return r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (r Replication) Status() string {
	return r.rawResponse.Status
}

// ReplicationListResult - The result of a request to list replications for a container registry.
type ReplicationListResult struct {
	rawResponse *http.Response
	// Value - The list of replications. Since this list may be incomplete, the nextLink field should be used to request the next list of replications.
	Value []Replication `json:"value,omitempty"`
	// NextLink - The URI that can be used to request the next list of replications.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rlr ReplicationListResult) Response() *http.Response {
	return rlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rlr ReplicationListResult) StatusCode() int {
	return rlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rlr ReplicationListResult) Status() string {
	return rlr.rawResponse.Status
}

// ReplicationProperties - The properties of a replication.
type ReplicationProperties struct {
	// ProvisioningState - The provisioning state of the replication at the time the operation was called. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled', 'None'
	ProvisioningState ProvisioningStateType `json:"provisioningState,omitempty"`
	// Status - The status of the replication at the time the operation was called.
	Status *Status `json:"status,omitempty"`
}

// ReplicationUpdateParameters - The parameters for updating a replication.
type ReplicationUpdateParameters struct {
	// Tags - The tags for the replication.
	Tags map[string]string `json:"tags,omitempty"`
}

// Request - The request that generated the event.
type Request struct {
	// ID - The ID of the request that initiated the event.
	ID *string `json:"id,omitempty"`
	// Addr - The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
	Addr *string `json:"addr,omitempty"`
	// Host - The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
	Host *string `json:"host,omitempty"`
	// Method - The request method that generated the event.
	Method *string `json:"method,omitempty"`
	// Useragent - The user agent header of the request.
	Useragent *string `json:"useragent,omitempty"`
}

// Resource - An Azure resource.
type Resource struct {
	// ID - The resource ID.
	ID *string `json:"id,omitempty"`
	// Name - The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - The type of the resource.
	Type *string `json:"type,omitempty"`
	// Location - The location of the resource. This cannot be changed after the resource is created.
	Location string `json:"location,omitempty"`
	// Tags - The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// Sku - The SKU of a container registry.
type Sku struct {
	// Name - The SKU name of the container registry. Required for registry creation. Possible values include: 'Basic', 'ManagedBasic', 'ManagedStandard', 'ManagedPremium', 'None'
	Name SkuNameType `json:"name,omitempty"`
	// Tier - The SKU tier based on the SKU name. Possible values include: 'Basic', 'Managed', 'None'
	Tier SkuTierType `json:"tier,omitempty"`
}

// Source - The registry node that generated the event. Put differently, while the actor initiates the event, the
// source generates it.
type Source struct {
	// Addr - The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.
	Addr *string `json:"addr,omitempty"`
	// InstanceID - The running instance of an application. Changes after each restart.
	InstanceID *string `json:"instanceID,omitempty"`
}

// Status - The status of an Azure resource at the time the operation was called.
type Status struct {
	// DisplayStatus - The short label for the status.
	DisplayStatus *string `json:"displayStatus,omitempty"`
	// Message - The detailed message for the status, including alerts and error messages.
	Message *string `json:"message,omitempty"`
	// Timestamp - The timestamp when the status was changed to the current value.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// StorageAccountProperties - The properties of a storage account for a container registry. Only applicable to Basic
// SKU.
type StorageAccountProperties struct {
	// ID - The resource ID of the storage account.
	ID string `json:"id,omitempty"`
}

// Target - The target of the event.
type Target struct {
	// MediaType - The MIME type of the referenced object.
	MediaType *string `json:"mediaType,omitempty"`
	// Size - The number of bytes of the content. Same as Length field.
	Size *int64 `json:"size,omitempty"`
	// Digest - The digest of the content, as defined by the Registry V2 HTTP API Specificiation.
	Digest *string `json:"digest,omitempty"`
	// Length - The number of bytes of the content. Same as Size field.
	Length *int64 `json:"length,omitempty"`
	// Repository - The repository name.
	Repository *string `json:"repository,omitempty"`
	// URL - The direct URL to the content.
	URL *string `json:"url,omitempty"`
	// Tag - The tag name.
	Tag *string `json:"tag,omitempty"`
}

// Webhook - An object that represents a webhook for a container registry.
type Webhook struct {
	rawResponse *http.Response
	// ID - The resource ID.
	ID *string `json:"id,omitempty"`
	// Name - The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - The type of the resource.
	Type *string `json:"type,omitempty"`
	// Location - The location of the resource. This cannot be changed after the resource is created.
	Location string `json:"location,omitempty"`
	// Tags - The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties of the webhook.
	*WebhookProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (w Webhook) Response() *http.Response {
	return w.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (w Webhook) StatusCode() int {
	return w.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (w Webhook) Status() string {
	return w.rawResponse.Status
}

// WebhookCreateParameters - The parameters for creating a webhook.
type WebhookCreateParameters struct {
	// Tags - The tags for the webhook.
	Tags map[string]string `json:"tags,omitempty"`
	// Location - The location of the webhook. This cannot be changed after the resource is created.
	Location string `json:"location,omitempty"`
	// Properties - The properties that the webhook will be created with.
	*WebhookPropertiesCreateParameters `json:"properties,omitempty"`
}

// WebhookListResult - The result of a request to list webhooks for a container registry.
type WebhookListResult struct {
	rawResponse *http.Response
	// Value - The list of webhooks. Since this list may be incomplete, the nextLink field should be used to request the next list of webhooks.
	Value []Webhook `json:"value,omitempty"`
	// NextLink - The URI that can be used to request the next list of webhooks.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wlr WebhookListResult) Response() *http.Response {
	return wlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wlr WebhookListResult) StatusCode() int {
	return wlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wlr WebhookListResult) Status() string {
	return wlr.rawResponse.Status
}

// WebhookProperties - The properties of a webhook.
type WebhookProperties struct {
	// Status - The status of the webhook at the time the operation was called. Possible values include: 'Enabled', 'Disabled', 'None'
	Status WebhookStatusType `json:"status,omitempty"`
	// Scope - The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.
	Scope *string `json:"scope,omitempty"`
	// Actions - The list of actions that trigger the webhook to post notifications.
	Actions []WebhookActionType `json:"actions,omitempty"`
	// ProvisioningState - The provisioning state of the webhook at the time the operation was called. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled', 'None'
	ProvisioningState ProvisioningStateType `json:"provisioningState,omitempty"`
}

// WebhookPropertiesCreateParameters - The parameters for creating the properties of a webhook.
type WebhookPropertiesCreateParameters struct {
	// ServiceURI - The service URI for the webhook to post notifications.
	ServiceURI string `json:"serviceUri,omitempty"`
	// CustomHeaders - Custom headers that will be added to the webhook notifications.
	CustomHeaders map[string]string `json:"customHeaders,omitempty"`
	// Status - The status of the webhook at the time the operation was called. Possible values include: 'Enabled', 'Disabled', 'None'
	Status WebhookStatusType `json:"status,omitempty"`
	// Scope - The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.
	Scope *string `json:"scope,omitempty"`
	// Actions - The list of actions that trigger the webhook to post notifications.
	Actions []WebhookActionType `json:"actions,omitempty"`
}

// WebhookPropertiesUpdateParameters - The parameters for updating the properties of a webhook.
type WebhookPropertiesUpdateParameters struct {
	// ServiceURI - The service URI for the webhook to post notifications.
	ServiceURI *string `json:"serviceUri,omitempty"`
	// CustomHeaders - Custom headers that will be added to the webhook notifications.
	CustomHeaders map[string]string `json:"customHeaders,omitempty"`
	// Status - The status of the webhook at the time the operation was called. Possible values include: 'Enabled', 'Disabled', 'None'
	Status WebhookStatusType `json:"status,omitempty"`
	// Scope - The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.
	Scope *string `json:"scope,omitempty"`
	// Actions - The list of actions that trigger the webhook to post notifications.
	Actions []WebhookActionType `json:"actions,omitempty"`
}

// WebhookUpdateParameters - The parameters for updating a webhook.
type WebhookUpdateParameters struct {
	// Tags - The tags for the webhook.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties that the webhook will be updated with.
	*WebhookPropertiesUpdateParameters `json:"properties,omitempty"`
}
