package containerregistry

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// Registry - An object that represents a container registry.
type Registry struct {
	rawResponse *http.Response
	// ID - The resource ID.
	ID *string `json:"id,omitempty"`
	// Name - The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - The type of the resource.
	Type *string `json:"type,omitempty"`
	// Location - The location of the resource. This cannot be changed after the resource is created.
	Location string `json:"location,omitempty"`
	// Tags - The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties of the container registry.
	*RegistryProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (r Registry) Response() *http.Response {
	return r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (r Registry) StatusCode() int {
	return r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (r Registry) Status() string {
	return r.rawResponse.Status
}

// RegistryCredentials - The result of a request to get the administrator login credentials for a container registry.
type RegistryCredentials struct {
	rawResponse *http.Response
	// Username - The administrator username.
	Username *string `json:"username,omitempty"`
	// Password - The administrator password.
	Password *string `json:"password,omitempty"`
}

// Response returns the raw HTTP response object.
func (rc RegistryCredentials) Response() *http.Response {
	return rc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rc RegistryCredentials) StatusCode() int {
	return rc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rc RegistryCredentials) Status() string {
	return rc.rawResponse.Status
}

// RegistryListResult - The result of a request to list container registries.
type RegistryListResult struct {
	rawResponse *http.Response
	// Value - The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries.
	Value []Registry `json:"value,omitempty"`
	// NextLink - The URI that can be used to request the next list of container registries.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rlr RegistryListResult) Response() *http.Response {
	return rlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rlr RegistryListResult) StatusCode() int {
	return rlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rlr RegistryListResult) Status() string {
	return rlr.rawResponse.Status
}

// RegistryNameCheckRequest - A request to check whether the container registry name is available.
type RegistryNameCheckRequest struct {
	// Name - The name of the container registry.
	Name string `json:"name,omitempty"`
	// Type - The resource type of the container registry. This field must be set to "Microsoft.ContainerRegistry/registries".
	Type string `json:"type,omitempty"`
}

// RegistryNameStatus - The result of a request to check the availability of a container registry name.
type RegistryNameStatus struct {
	rawResponse *http.Response
	// NameAvailable - The value that indicates whether the name is available.
	NameAvailable *bool `json:"nameAvailable,omitempty"`
	// Reason - If any, the reason that the name is not available.
	Reason *string `json:"reason,omitempty"`
	// Message - If any, the error message that provides more detail for the reason that the name is not available.
	Message *string `json:"message,omitempty"`
}

// Response returns the raw HTTP response object.
func (rns RegistryNameStatus) Response() *http.Response {
	return rns.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rns RegistryNameStatus) StatusCode() int {
	return rns.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rns RegistryNameStatus) Status() string {
	return rns.rawResponse.Status
}

// RegistryProperties - The properties of a container registry.
type RegistryProperties struct {
	// LoginServer - The URL that can be used to log into the container registry.
	LoginServer *string `json:"loginServer,omitempty"`
	// CreationDate - The creation date of the container registry in ISO8601 format.
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// AdminUserEnabled - The value that indicates whether the admin user is enabled. This value is false by default.
	AdminUserEnabled *bool `json:"adminUserEnabled,omitempty"`
	// StorageAccount - The properties of the storage account for the container registry. If specified, the storage account must be in the same physical location as the container registry.
	StorageAccount StorageAccountProperties `json:"storageAccount,omitempty"`
}

// RegistryPropertiesUpdateParameters - The parameters for updating the properties of a container registry.
type RegistryPropertiesUpdateParameters struct {
	// AdminUserEnabled - The value that indicates whether the admin user is enabled. This value is false by default.
	AdminUserEnabled *bool `json:"adminUserEnabled,omitempty"`
	// StorageAccount - The properties of a storage account for the container registry. If specified, the storage account must be in the same physical location as the container registry.
	StorageAccount *StorageAccountProperties `json:"storageAccount,omitempty"`
}

// RegistryUpdateParameters - The parameters for updating a container registry.
type RegistryUpdateParameters struct {
	// Tags - The resource tags for the container registry.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties that the container registry will be updated with.
	*RegistryPropertiesUpdateParameters `json:"properties,omitempty"`
}

// Resource - An Azure resource.
type Resource struct {
	// ID - The resource ID.
	ID *string `json:"id,omitempty"`
	// Name - The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - The type of the resource.
	Type *string `json:"type,omitempty"`
	// Location - The location of the resource. This cannot be changed after the resource is created.
	Location string `json:"location,omitempty"`
	// Tags - The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// StorageAccountProperties - The properties of a storage account for a container registry.
type StorageAccountProperties struct {
	// Name - The name of the storage account.
	Name string `json:"name,omitempty"`
	// AccessKey - The access key to the storage account.
	AccessKey string `json:"accessKey,omitempty"`
}
