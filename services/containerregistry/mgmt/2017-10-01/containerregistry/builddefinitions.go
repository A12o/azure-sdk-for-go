package containerregistry

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// BuildDefinitionsClient is the client for the BuildDefinitions methods of the Containerregistry service.
type BuildDefinitionsClient struct {
	BaseClient
}

// NewBuildDefinitionsClient creates an instance of the BuildDefinitionsClient client.
func NewBuildDefinitionsClient(subscriptionID string, subscriptionID1 string) BuildDefinitionsClient {
	return NewBuildDefinitionsClientWithBaseURI(DefaultBaseURI, subscriptionID, subscriptionID1)
}

// NewBuildDefinitionsClientWithBaseURI creates an instance of the BuildDefinitionsClient client.
func NewBuildDefinitionsClientWithBaseURI(baseURI string, subscriptionID string, subscriptionID1 string) BuildDefinitionsClient {
	return BuildDefinitionsClient{NewWithBaseURI(baseURI, subscriptionID, subscriptionID1)}
}

// AddTrigger sends the add trigger request.
//
// buildTriggerParameters is the parameters for adding a build trigger. resourceGroupName is the name of the resource
// group to which the container registry belongs. registryName is the name of the container registry.
// buildDefinitionName is the name of the container registry build definition.
func (client BuildDefinitionsClient) AddTrigger(ctx context.Context, buildTriggerParameters BasicBuildTriggerParameters, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildDefinitionsAddTriggerFuture, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildDefinitionsClient", "AddTrigger")
	}

	req, err := client.AddTriggerPreparer(ctx, buildTriggerParameters, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "AddTrigger", nil, "Failure preparing request")
		return
	}

	result, err = client.AddTriggerSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "AddTrigger", result.Response(), "Failure sending request")
		return
	}

	return
}

// AddTriggerPreparer prepares the AddTrigger request.
func (client BuildDefinitionsClient) AddTriggerPreparer(ctx context.Context, buildTriggerParameters BasicBuildTriggerParameters, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}/addTrigger", pathParameters),
		autorest.WithJSON(buildTriggerParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AddTriggerSender sends the AddTrigger request. The method will close the
// http.Response Body if it receives an error.
func (client BuildDefinitionsClient) AddTriggerSender(req *http.Request) (future BuildDefinitionsAddTriggerFuture, err error) {
	sender := autorest.DecorateSender(client, azure.DoRetryWithRegistration(client.Client))
	future.Future = azure.NewFuture(req)
	future.req = req
	_, err = future.Done(sender)
	if err != nil {
		return
	}
	err = autorest.Respond(future.Response(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNotFound))
	return
}

// AddTriggerResponder handles the response to the AddTrigger request. The method always
// closes the http.Response Body.
func (client BuildDefinitionsClient) AddTriggerResponder(resp *http.Response) (result BuildTriggerModel, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Create sends the create request.
//
// buildDefinitionCreateParameters is the parameters for creating a build definition. resourceGroupName is the name of
// the resource group to which the container registry belongs. registryName is the name of the container registry.
// buildDefinitionName is the name of the container registry build definition.
func (client BuildDefinitionsClient) Create(ctx context.Context, buildDefinitionCreateParameters BuildDefinitionCreateParameters, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildDefinitionsCreateFuture, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: buildDefinitionCreateParameters,
			Constraints: []validation.Constraint{{Target: "buildDefinitionCreateParameters.BuildDefinitionPropertiesCreateParameters", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "buildDefinitionCreateParameters.BuildDefinitionPropertiesCreateParameters.SourceRepository", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "buildDefinitionCreateParameters.BuildDefinitionPropertiesCreateParameters.SourceRepository.RepositoryURL", Name: validation.Null, Rule: true, Chain: nil},
						{Target: "buildDefinitionCreateParameters.BuildDefinitionPropertiesCreateParameters.SourceRepository.SourceControlAuthProperties", Name: validation.Null, Rule: false,
							Chain: []validation.Constraint{{Target: "buildDefinitionCreateParameters.BuildDefinitionPropertiesCreateParameters.SourceRepository.SourceControlAuthProperties.Token", Name: validation.Null, Rule: true, Chain: nil}}},
					}},
					{Target: "buildDefinitionCreateParameters.BuildDefinitionPropertiesCreateParameters.Steps", Name: validation.Null, Rule: true, Chain: nil},
				}}}},
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildDefinitionsClient", "Create")
	}

	req, err := client.CreatePreparer(ctx, buildDefinitionCreateParameters, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Create", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Create", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client BuildDefinitionsClient) CreatePreparer(ctx context.Context, buildDefinitionCreateParameters BuildDefinitionCreateParameters, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}", pathParameters),
		autorest.WithJSON(buildDefinitionCreateParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client BuildDefinitionsClient) CreateSender(req *http.Request) (future BuildDefinitionsCreateFuture, err error) {
	sender := autorest.DecorateSender(client, azure.DoRetryWithRegistration(client.Client))
	future.Future = azure.NewFuture(req)
	future.req = req
	_, err = future.Done(sender)
	if err != nil {
		return
	}
	err = autorest.Respond(future.Response(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated))
	return
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client BuildDefinitionsClient) CreateResponder(resp *http.Response) (result BuildDefinition, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete sends the delete request.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. buildDefinitionName is the name of the container registry build definition.
func (client BuildDefinitionsClient) Delete(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildDefinitionsDeleteFuture, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildDefinitionsClient", "Delete")
	}

	req, err := client.DeletePreparer(ctx, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client BuildDefinitionsClient) DeletePreparer(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client BuildDefinitionsClient) DeleteSender(req *http.Request) (future BuildDefinitionsDeleteFuture, err error) {
	sender := autorest.DecorateSender(client, azure.DoRetryWithRegistration(client.Client))
	future.Future = azure.NewFuture(req)
	future.req = req
	_, err = future.Done(sender)
	if err != nil {
		return
	}
	err = autorest.Respond(future.Response(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent))
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client BuildDefinitionsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get sends the get request.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. buildDefinitionName is the name of the container registry build definition.
func (client BuildDefinitionsClient) Get(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildDefinition, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildDefinitionsClient", "Get")
	}

	req, err := client.GetPreparer(ctx, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client BuildDefinitionsClient) GetPreparer(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client BuildDefinitionsClient) GetSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client BuildDefinitionsClient) GetResponder(resp *http.Response) (result BuildDefinition, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List sends the list request.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. filter is oData Filter options
func (client BuildDefinitionsClient) List(ctx context.Context, resourceGroupName string, registryName string, filter string) (result BuildDefinitionListResultPage, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildDefinitionsClient", "List")
	}

	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, resourceGroupName, registryName, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.bdlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "List", resp, "Failure sending request")
		return
	}

	result.bdlr, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client BuildDefinitionsClient) ListPreparer(ctx context.Context, resourceGroupName string, registryName string, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"registryName":      autorest.Encode("path", registryName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client BuildDefinitionsClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client BuildDefinitionsClient) ListResponder(resp *http.Response) (result BuildDefinitionListResult, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client BuildDefinitionsClient) listNextResults(lastResults BuildDefinitionListResult) (result BuildDefinitionListResult, err error) {
	req, err := lastResults.buildDefinitionListResultPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client BuildDefinitionsClient) ListComplete(ctx context.Context, resourceGroupName string, registryName string, filter string) (result BuildDefinitionListResultIterator, err error) {
	result.page, err = client.List(ctx, resourceGroupName, registryName, filter)
	return
}

// ListBuilds sends the list builds request.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. buildDefinitionName is the name of the container registry build definition. filter
// is oData Filter options
func (client BuildDefinitionsClient) ListBuilds(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string, filter string) (result BuildListResultPage, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildDefinitionsClient", "ListBuilds")
	}

	result.fn = client.listBuildsNextResults
	req, err := client.ListBuildsPreparer(ctx, resourceGroupName, registryName, buildDefinitionName, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "ListBuilds", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListBuildsSender(req)
	if err != nil {
		result.blr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "ListBuilds", resp, "Failure sending request")
		return
	}

	result.blr, err = client.ListBuildsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "ListBuilds", resp, "Failure responding to request")
	}

	return
}

// ListBuildsPreparer prepares the ListBuilds request.
func (client BuildDefinitionsClient) ListBuildsPreparer(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}/builds", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListBuildsSender sends the ListBuilds request. The method will close the
// http.Response Body if it receives an error.
func (client BuildDefinitionsClient) ListBuildsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ListBuildsResponder handles the response to the ListBuilds request. The method always
// closes the http.Response Body.
func (client BuildDefinitionsClient) ListBuildsResponder(resp *http.Response) (result BuildListResult, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listBuildsNextResults retrieves the next set of results, if any.
func (client BuildDefinitionsClient) listBuildsNextResults(lastResults BuildListResult) (result BuildListResult, err error) {
	req, err := lastResults.buildListResultPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "listBuildsNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListBuildsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "listBuildsNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListBuildsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "listBuildsNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListBuildsComplete enumerates all values, automatically crossing page boundaries as required.
func (client BuildDefinitionsClient) ListBuildsComplete(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string, filter string) (result BuildListResultIterator, err error) {
	result.page, err = client.ListBuilds(ctx, resourceGroupName, registryName, buildDefinitionName, filter)
	return
}

// QueueBuild sends the queue build request.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. buildDefinitionName is the name of the container registry build definition.
func (client BuildDefinitionsClient) QueueBuild(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildDefinitionsQueueBuildFuture, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildDefinitionsClient", "QueueBuild")
	}

	req, err := client.QueueBuildPreparer(ctx, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "QueueBuild", nil, "Failure preparing request")
		return
	}

	result, err = client.QueueBuildSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "QueueBuild", result.Response(), "Failure sending request")
		return
	}

	return
}

// QueueBuildPreparer prepares the QueueBuild request.
func (client BuildDefinitionsClient) QueueBuildPreparer(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}/queue", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QueueBuildSender sends the QueueBuild request. The method will close the
// http.Response Body if it receives an error.
func (client BuildDefinitionsClient) QueueBuildSender(req *http.Request) (future BuildDefinitionsQueueBuildFuture, err error) {
	sender := autorest.DecorateSender(client, azure.DoRetryWithRegistration(client.Client))
	future.Future = azure.NewFuture(req)
	future.req = req
	_, err = future.Done(sender)
	if err != nil {
		return
	}
	err = autorest.Respond(future.Response(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNotFound))
	return
}

// QueueBuildResponder handles the response to the QueueBuild request. The method always
// closes the http.Response Body.
func (client BuildDefinitionsClient) QueueBuildResponder(resp *http.Response) (result Build, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Update sends the update request.
//
// buildDefinitionUpdateParameters is the parameters for updating a build definition. resourceGroupName is the name of
// the resource group to which the container registry belongs. registryName is the name of the container registry.
// buildDefinitionName is the name of the container registry build definition.
func (client BuildDefinitionsClient) Update(ctx context.Context, buildDefinitionUpdateParameters BuildDefinitionUpdateParameters, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildDefinitionsUpdateFuture, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildDefinitionsClient", "Update")
	}

	req, err := client.UpdatePreparer(ctx, buildDefinitionUpdateParameters, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Update", nil, "Failure preparing request")
		return
	}

	result, err = client.UpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildDefinitionsClient", "Update", result.Response(), "Failure sending request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client BuildDefinitionsClient) UpdatePreparer(ctx context.Context, buildDefinitionUpdateParameters BuildDefinitionUpdateParameters, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}", pathParameters),
		autorest.WithJSON(buildDefinitionUpdateParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client BuildDefinitionsClient) UpdateSender(req *http.Request) (future BuildDefinitionsUpdateFuture, err error) {
	sender := autorest.DecorateSender(client, azure.DoRetryWithRegistration(client.Client))
	future.Future = azure.NewFuture(req)
	future.req = req
	_, err = future.Done(sender)
	if err != nil {
		return
	}
	err = autorest.Respond(future.Response(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound))
	return
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client BuildDefinitionsClient) UpdateResponder(resp *http.Response) (result BuildDefinition, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
