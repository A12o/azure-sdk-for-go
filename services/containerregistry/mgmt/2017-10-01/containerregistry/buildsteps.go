package containerregistry

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// BuildStepsClient is the client for the BuildSteps methods of the Containerregistry service.
type BuildStepsClient struct {
	BaseClient
}

// NewBuildStepsClient creates an instance of the BuildStepsClient client.
func NewBuildStepsClient(subscriptionID string, subscriptionID1 string) BuildStepsClient {
	return NewBuildStepsClientWithBaseURI(DefaultBaseURI, subscriptionID, subscriptionID1)
}

// NewBuildStepsClientWithBaseURI creates an instance of the BuildStepsClient client.
func NewBuildStepsClientWithBaseURI(baseURI string, subscriptionID string, subscriptionID1 string) BuildStepsClient {
	return BuildStepsClient{NewWithBaseURI(baseURI, subscriptionID, subscriptionID1)}
}

// Get sends the get request.
//
// stepName is the name of the build item. resourceGroupName is the name of the resource group to which the container
// registry belongs. registryName is the name of the container registry. buildDefinitionName is the name of the
// container registry build definition.
func (client BuildStepsClient) Get(ctx context.Context, stepName string, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildStepModel, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildStepsClient", "Get")
	}

	req, err := client.GetPreparer(ctx, stepName, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client BuildStepsClient) GetPreparer(ctx context.Context, stepName string, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"stepName":            autorest.Encode("path", stepName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}/steps/{stepName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client BuildStepsClient) GetSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client BuildStepsClient) GetResponder(resp *http.Response) (result BuildStepModel, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List sends the list request.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. buildDefinitionName is the name of the container registry build definition.
func (client BuildStepsClient) List(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildStepListPage, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildStepsClient", "List")
	}

	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.bsl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "List", resp, "Failure sending request")
		return
	}

	result.bsl, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client BuildStepsClient) ListPreparer(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}/steps", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client BuildStepsClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client BuildStepsClient) ListResponder(resp *http.Response) (result BuildStepList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client BuildStepsClient) listNextResults(lastResults BuildStepList) (result BuildStepList, err error) {
	req, err := lastResults.buildStepListPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client BuildStepsClient) ListComplete(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildStepListIterator, err error) {
	result.page, err = client.List(ctx, resourceGroupName, registryName, buildDefinitionName)
	return
}

// Update sends the update request.
//
// stepName is the name of the build step. buildStepUpdateParameters is the parameters for updating a build step.
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. buildDefinitionName is the name of the container registry build definition.
func (client BuildStepsClient) Update(ctx context.Context, stepName string, buildStepUpdateParameters BasicBuildStepUpdateParameters, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildStepModel, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildStepsClient", "Update")
	}

	req, err := client.UpdatePreparer(ctx, stepName, buildStepUpdateParameters, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "Update", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "Update", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildStepsClient", "Update", resp, "Failure responding to request")
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client BuildStepsClient) UpdatePreparer(ctx context.Context, stepName string, buildStepUpdateParameters BasicBuildStepUpdateParameters, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"stepName":            autorest.Encode("path", stepName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}/steps/{stepName}", pathParameters),
		autorest.WithJSON(buildStepUpdateParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client BuildStepsClient) UpdateSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client BuildStepsClient) UpdateResponder(resp *http.Response) (result BuildStepModel, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
