package containerregistry

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// BuildTriggersClient is the client for the BuildTriggers methods of the Containerregistry service.
type BuildTriggersClient struct {
	BaseClient
}

// NewBuildTriggersClient creates an instance of the BuildTriggersClient client.
func NewBuildTriggersClient(subscriptionID string, subscriptionID1 string) BuildTriggersClient {
	return NewBuildTriggersClientWithBaseURI(DefaultBaseURI, subscriptionID, subscriptionID1)
}

// NewBuildTriggersClientWithBaseURI creates an instance of the BuildTriggersClient client.
func NewBuildTriggersClientWithBaseURI(baseURI string, subscriptionID string, subscriptionID1 string) BuildTriggersClient {
	return BuildTriggersClient{NewWithBaseURI(baseURI, subscriptionID, subscriptionID1)}
}

// Delete sends the delete request.
//
// triggerID is the trigger identifier. resourceGroupName is the name of the resource group to which the container
// registry belongs. registryName is the name of the container registry. buildDefinitionName is the name of the
// container registry build definition.
func (client BuildTriggersClient) Delete(ctx context.Context, triggerID string, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildTriggersDeleteFuture, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildTriggersClient", "Delete")
	}

	req, err := client.DeletePreparer(ctx, triggerID, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildTriggersClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildTriggersClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client BuildTriggersClient) DeletePreparer(ctx context.Context, triggerID string, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"triggerId":           autorest.Encode("path", triggerID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}/triggers/{triggerId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client BuildTriggersClient) DeleteSender(req *http.Request) (future BuildTriggersDeleteFuture, err error) {
	sender := autorest.DecorateSender(client, azure.DoRetryWithRegistration(client.Client))
	future.Future = azure.NewFuture(req)
	future.req = req
	_, err = future.Done(sender)
	if err != nil {
		return
	}
	err = autorest.Respond(future.Response(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent))
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client BuildTriggersClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// List sends the list request.
//
// resourceGroupName is the name of the resource group to which the container registry belongs. registryName is the
// name of the container registry. buildDefinitionName is the name of the container registry build definition.
func (client BuildTriggersClient) List(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildTriggerListPage, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: registryName,
			Constraints: []validation.Constraint{{Target: "registryName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "registryName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "registryName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}},
		{TargetValue: buildDefinitionName,
			Constraints: []validation.Constraint{{Target: "buildDefinitionName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.MinLength, Rule: 5, Chain: nil},
				{Target: "buildDefinitionName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "containerregistry.BuildTriggersClient", "List")
	}

	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, resourceGroupName, registryName, buildDefinitionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildTriggersClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.btl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BuildTriggersClient", "List", resp, "Failure sending request")
		return
	}

	result.btl, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildTriggersClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client BuildTriggersClient) ListPreparer(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"buildDefinitionName": autorest.Encode("path", buildDefinitionName),
		"registryName":        autorest.Encode("path", registryName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildDefinitions/{buildDefinitionName}/triggers", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client BuildTriggersClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client BuildTriggersClient) ListResponder(resp *http.Response) (result BuildTriggerList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client BuildTriggersClient) listNextResults(lastResults BuildTriggerList) (result BuildTriggerList, err error) {
	req, err := lastResults.buildTriggerListPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "containerregistry.BuildTriggersClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "containerregistry.BuildTriggersClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BuildTriggersClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client BuildTriggersClient) ListComplete(ctx context.Context, resourceGroupName string, registryName string, buildDefinitionName string) (result BuildTriggerListIterator, err error) {
	result.page, err = client.List(ctx, resourceGroupName, registryName, buildDefinitionName)
	return
}
