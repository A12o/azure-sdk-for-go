package filesystem

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
)

// AppendModeType enumerates the values for append mode type.
type AppendModeType string

const (
	// AppendModeAutocreate ...
	AppendModeAutocreate AppendModeType = "autocreate"
	// AppendModeNone represents an empty AppendModeType.
	AppendModeNone AppendModeType = ""
)

// ExceptionType enumerates the values for exception.
type ExceptionType string

const (
	// ExceptionExceptionAccessControlException ...
	ExceptionExceptionAccessControlException ExceptionType = "AccessControlException"
	// ExceptionExceptionBadOffsetException ...
	ExceptionExceptionBadOffsetException ExceptionType = "BadOffsetException"
	// ExceptionExceptionFileAlreadyExistsException ...
	ExceptionExceptionFileAlreadyExistsException ExceptionType = "FileAlreadyExistsException"
	// ExceptionExceptionFileNotFoundException ...
	ExceptionExceptionFileNotFoundException ExceptionType = "FileNotFoundException"
	// ExceptionExceptionIllegalArgumentException ...
	ExceptionExceptionIllegalArgumentException ExceptionType = "IllegalArgumentException"
	// ExceptionExceptionIOException ...
	ExceptionExceptionIOException ExceptionType = "IOException"
	// ExceptionExceptionRuntimeException ...
	ExceptionExceptionRuntimeException ExceptionType = "RuntimeException"
	// ExceptionExceptionSecurityException ...
	ExceptionExceptionSecurityException ExceptionType = "SecurityException"
	// ExceptionExceptionUnsupportedOperationException ...
	ExceptionExceptionUnsupportedOperationException ExceptionType = "UnsupportedOperationException"
)

// ExpiryOptionType enumerates the values for expiry option type.
type ExpiryOptionType string

const (
	// ExpiryOptionAbsolute ...
	ExpiryOptionAbsolute ExpiryOptionType = "Absolute"
	// ExpiryOptionNeverExpire ...
	ExpiryOptionNeverExpire ExpiryOptionType = "NeverExpire"
	// ExpiryOptionNone represents an empty ExpiryOptionType.
	ExpiryOptionNone ExpiryOptionType = ""
	// ExpiryOptionRelativeToCreationDate ...
	ExpiryOptionRelativeToCreationDate ExpiryOptionType = "RelativeToCreationDate"
	// ExpiryOptionRelativeToNow ...
	ExpiryOptionRelativeToNow ExpiryOptionType = "RelativeToNow"
)

// FileType enumerates the values for file type.
type FileType string

const (
	// FileDIRECTORY ...
	FileDIRECTORY FileType = "DIRECTORY"
	// FileFILE ...
	FileFILE FileType = "FILE"
	// FileNone represents an empty FileType.
	FileNone FileType = ""
)

// ACLStatus - Data Lake Store file or directory Access Control List information.
type ACLStatus struct {
	// Entries - the list of ACLSpec entries on a file or directory.
	Entries []string `json:"entries,omitempty"`
	// Group - the group owner, an AAD Object ID.
	Group *string `json:"group,omitempty"`
	// Owner - the user owner, an AAD Object ID.
	Owner *string `json:"owner,omitempty"`
	// Permission - The octal representation of the unnamed user, mask and other permissions.
	Permission *int32 `json:"permission,omitempty"`
	// StickyBit - the indicator of whether the sticky bit is on or off.
	StickyBit *bool `json:"stickyBit,omitempty"`
}

// ACLStatusResult - Data Lake Store file or directory Access Control List information.
type ACLStatusResult struct {
	rawResponse *http.Response
	// ACLStatus - the AclStatus object for a given file or directory.
	ACLStatus *ACLStatus `json:"AclStatus,omitempty"`
}

// Response returns the raw HTTP response object.
func (asr ACLStatusResult) Response() *http.Response {
	return asr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (asr ACLStatusResult) StatusCode() int {
	return asr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (asr ACLStatusResult) Status() string {
	return asr.rawResponse.Status
}

// AdlsAccessControlException - A WebHDFS exception thrown indicating that access is denied due to insufficient
// permissions. Thrown when a 403 error response code is returned (forbidden).
type AdlsAccessControlException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsAccessControlException.
func (aace AdlsAccessControlException) MarshalJSON() ([]byte, error) {
	aace.Exception = ExceptionAccessControlException
	type Alias AdlsAccessControlException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(aace),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return nil, false
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return nil, false
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return nil, false
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsIOException() (*AdlsIOException, bool) {
	return nil, false
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return nil, false
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return nil, false
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return nil, false
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return nil, false
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsAccessControlException.
func (aace AdlsAccessControlException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return &aace, true
}

// AdlsBadOffsetException - A WebHDFS exception thrown indicating the append or read is from a bad offset. Thrown when
// a 400 error response code is returned for append and open operations (Bad request).
type AdlsBadOffsetException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) MarshalJSON() ([]byte, error) {
	aboe.Exception = ExceptionBadOffsetException
	type Alias AdlsBadOffsetException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(aboe),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return nil, false
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return nil, false
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return nil, false
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsIOException() (*AdlsIOException, bool) {
	return nil, false
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return nil, false
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return nil, false
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return &aboe, true
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return nil, false
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsBadOffsetException.
func (aboe AdlsBadOffsetException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return nil, false
}

// AdlsError - Data Lake Store filesystem error containing a specific WebHDFS exception.
type AdlsError struct {
	// RemoteException - the object representing the actual WebHDFS exception being returned.
	RemoteException AdlsRemoteException `json:"RemoteException,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for AdlsError struct.
func (ae *AdlsError) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["RemoteException"]
	if v != nil {
		remoteException, err := unmarshalAdlsRemoteException(*m["RemoteException"])
		if err != nil {
			return err
		}
		ae.RemoteException = remoteException
	}

	return nil
}

// AdlsFileAlreadyExistsException - A WebHDFS exception thrown indicating the file or folder already exists. Thrown
// when a 403 error response code is returned (forbidden).
type AdlsFileAlreadyExistsException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) MarshalJSON() ([]byte, error) {
	afaee.Exception = ExceptionFileAlreadyExistsException
	type Alias AdlsFileAlreadyExistsException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(afaee),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return nil, false
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return nil, false
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return nil, false
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsIOException() (*AdlsIOException, bool) {
	return nil, false
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return nil, false
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return &afaee, true
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return nil, false
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return nil, false
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsFileAlreadyExistsException.
func (afaee AdlsFileAlreadyExistsException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return nil, false
}

// AdlsFileNotFoundException - A WebHDFS exception thrown indicating the file or folder could not be found. Thrown when
// a 404 error response code is returned (not found).
type AdlsFileNotFoundException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) MarshalJSON() ([]byte, error) {
	afnfe.Exception = ExceptionFileNotFoundException
	type Alias AdlsFileNotFoundException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(afnfe),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return nil, false
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return nil, false
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return nil, false
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsIOException() (*AdlsIOException, bool) {
	return nil, false
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return &afnfe, true
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return nil, false
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return nil, false
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return nil, false
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsFileNotFoundException.
func (afnfe AdlsFileNotFoundException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return nil, false
}

// AdlsIllegalArgumentException - A WebHDFS exception thrown indicating that one more arguments is incorrect. Thrown
// when a 400 error response code is returned (bad request).
type AdlsIllegalArgumentException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) MarshalJSON() ([]byte, error) {
	aiae.Exception = ExceptionIllegalArgumentException
	type Alias AdlsIllegalArgumentException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(aiae),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return &aiae, true
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return nil, false
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return nil, false
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsIOException() (*AdlsIOException, bool) {
	return nil, false
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return nil, false
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return nil, false
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return nil, false
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return nil, false
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsIllegalArgumentException.
func (aiae AdlsIllegalArgumentException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return nil, false
}

// AdlsIOException - A WebHDFS exception thrown indicating there was an IO (read or write) error. Thrown when a 403
// error response code is returned (forbidden).
type AdlsIOException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsIOException.
func (aie AdlsIOException) MarshalJSON() ([]byte, error) {
	aie.Exception = ExceptionIOException
	type Alias AdlsIOException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(aie),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return nil, false
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return nil, false
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return nil, false
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsIOException() (*AdlsIOException, bool) {
	return &aie, true
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return nil, false
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return nil, false
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return nil, false
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return nil, false
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsIOException.
func (aie AdlsIOException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return nil, false
}

type AdlsRemoteException interface {
	AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool)
	AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool)
	AsAdlsSecurityException() (*AdlsSecurityException, bool)
	AsAdlsIOException() (*AdlsIOException, bool)
	AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool)
	AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool)
	AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool)
	AsAdlsRuntimeException() (*AdlsRuntimeException, bool)
	AsAdlsAccessControlException() (*AdlsAccessControlException, bool)
}

func unmarshalAdlsRemoteException(body []byte) (AdlsRemoteException, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["exception"] {
	case string(ExceptionIllegalArgumentException):
		var aiae AdlsIllegalArgumentException
		err := json.Unmarshal(body, &aiae)
		return aiae, err
	case string(ExceptionUnsupportedOperationException):
		var auoe AdlsUnsupportedOperationException
		err := json.Unmarshal(body, &auoe)
		return auoe, err
	case string(ExceptionSecurityException):
		var ase AdlsSecurityException
		err := json.Unmarshal(body, &ase)
		return ase, err
	case string(ExceptionIOException):
		var aie AdlsIOException
		err := json.Unmarshal(body, &aie)
		return aie, err
	case string(ExceptionFileNotFoundException):
		var afnfe AdlsFileNotFoundException
		err := json.Unmarshal(body, &afnfe)
		return afnfe, err
	case string(ExceptionFileAlreadyExistsException):
		var afaee AdlsFileAlreadyExistsException
		err := json.Unmarshal(body, &afaee)
		return afaee, err
	case string(ExceptionBadOffsetException):
		var aboe AdlsBadOffsetException
		err := json.Unmarshal(body, &aboe)
		return aboe, err
	case string(ExceptionRuntimeException):
		var are AdlsRuntimeException
		err := json.Unmarshal(body, &are)
		return are, err
	case string(ExceptionAccessControlException):
		var aace AdlsAccessControlException
		err := json.Unmarshal(body, &aace)
		return aace, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalAdlsRemoteExceptionArray(body []byte) ([]AdlsRemoteException, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	areArray := make([]AdlsRemoteException, len(rawMessages))

	for index, rawMessage := range rawMessages {
		are, err := unmarshalAdlsRemoteException(*rawMessage)
		if err != nil {
			return nil, err
		}
		areArray[index] = are
	}
	return areArray, nil
}

// AdlsRuntimeException - A WebHDFS exception thrown when an unexpected error occurs during an operation. Thrown when a
// 500 error response code is returned (Internal server error).
type AdlsRuntimeException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsRuntimeException.
func (are AdlsRuntimeException) MarshalJSON() ([]byte, error) {
	are.Exception = ExceptionRuntimeException
	type Alias AdlsRuntimeException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(are),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return nil, false
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return nil, false
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return nil, false
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsIOException() (*AdlsIOException, bool) {
	return nil, false
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return nil, false
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return nil, false
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return nil, false
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return &are, true
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsRuntimeException.
func (are AdlsRuntimeException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return nil, false
}

// AdlsSecurityException - A WebHDFS exception thrown indicating that access is denied. Thrown when a 401 error
// response code is returned (Unauthorized).
type AdlsSecurityException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsSecurityException.
func (ase AdlsSecurityException) MarshalJSON() ([]byte, error) {
	ase.Exception = ExceptionSecurityException
	type Alias AdlsSecurityException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ase),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return nil, false
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return nil, false
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return &ase, true
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsIOException() (*AdlsIOException, bool) {
	return nil, false
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return nil, false
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return nil, false
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return nil, false
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return nil, false
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsSecurityException.
func (ase AdlsSecurityException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return nil, false
}

// AdlsUnsupportedOperationException - A WebHDFS exception thrown indicating that the requested operation is not
// supported. Thrown when a 400 error response code is returned (bad request).
type AdlsUnsupportedOperationException struct {
	// JavaClassName - the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.
	JavaClassName *string `json:"javaClassName,omitempty"`
	// Message - the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter "permission":...'.
	Message *string `json:"message,omitempty"`
	// Exception - Possible values include: 'ExceptionIllegalArgumentException', 'ExceptionUnsupportedOperationException', 'ExceptionSecurityException', 'ExceptionIOException', 'ExceptionFileNotFoundException', 'ExceptionFileAlreadyExistsException', 'ExceptionBadOffsetException', 'ExceptionRuntimeException', 'ExceptionAccessControlException'
	Exception ExceptionType `json:"exception,omitempty"`
}

// MarshalJSON is the custom marshaler for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) MarshalJSON() ([]byte, error) {
	auoe.Exception = ExceptionUnsupportedOperationException
	type Alias AdlsUnsupportedOperationException
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(auoe),
	})
}

// AsAdlsIllegalArgumentException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsIllegalArgumentException() (*AdlsIllegalArgumentException, bool) {
	return nil, false
}

// AsAdlsUnsupportedOperationException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsUnsupportedOperationException() (*AdlsUnsupportedOperationException, bool) {
	return &auoe, true
}

// AsAdlsSecurityException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsSecurityException() (*AdlsSecurityException, bool) {
	return nil, false
}

// AsAdlsIOException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsIOException() (*AdlsIOException, bool) {
	return nil, false
}

// AsAdlsFileNotFoundException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsFileNotFoundException() (*AdlsFileNotFoundException, bool) {
	return nil, false
}

// AsAdlsFileAlreadyExistsException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsFileAlreadyExistsException() (*AdlsFileAlreadyExistsException, bool) {
	return nil, false
}

// AsAdlsBadOffsetException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsBadOffsetException() (*AdlsBadOffsetException, bool) {
	return nil, false
}

// AsAdlsRuntimeException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsRuntimeException() (*AdlsRuntimeException, bool) {
	return nil, false
}

// AsAdlsAccessControlException is the AdlsRemoteException implementation for AdlsUnsupportedOperationException.
func (auoe AdlsUnsupportedOperationException) AsAdlsAccessControlException() (*AdlsAccessControlException, bool) {
	return nil, false
}

// ContentSummary - Data Lake Store content summary information
type ContentSummary struct {
	// DirectoryCount - the number of directories.
	DirectoryCount *int64 `json:"directoryCount,omitempty"`
	// FileCount - the number of files.
	FileCount *int64 `json:"fileCount,omitempty"`
	// Length - the number of bytes used by the contet.
	Length *int64 `json:"length,omitempty"`
	// SpaceConsumed - the disk space consumed by the content.
	SpaceConsumed *int64 `json:"spaceConsumed,omitempty"`
}

// ContentSummaryResult - Data Lake Store filesystem content summary information response.
type ContentSummaryResult struct {
	rawResponse *http.Response
	// ContentSummary - the content summary for the specified path
	ContentSummary *ContentSummary `json:"ContentSummary,omitempty"`
}

// Response returns the raw HTTP response object.
func (csr ContentSummaryResult) Response() *http.Response {
	return csr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (csr ContentSummaryResult) StatusCode() int {
	return csr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (csr ContentSummaryResult) Status() string {
	return csr.rawResponse.Status
}

// FileOperationResult - The result of the request or operation.
type FileOperationResult struct {
	rawResponse *http.Response
	// OperationResult - the result of the operation or request.
	OperationResult *bool `json:"boolean,omitempty"`
}

// Response returns the raw HTTP response object.
func (forVar FileOperationResult) Response() *http.Response {
	return forVar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (forVar FileOperationResult) StatusCode() int {
	return forVar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (forVar FileOperationResult) Status() string {
	return forVar.rawResponse.Status
}

// FileStatuses - Data Lake Store file status list information.
type FileStatuses struct {
	// FileStatus - the object containing the list of properties of the files.
	FileStatus []FileStatusProperties `json:"FileStatus,omitempty"`
}

// FileStatusesResult - Data Lake Store filesystem file status list information response.
type FileStatusesResult struct {
	rawResponse *http.Response
	// FileStatuses - the object representing the list of file statuses.
	FileStatuses *FileStatuses `json:"FileStatuses,omitempty"`
}

// Response returns the raw HTTP response object.
func (fsr FileStatusesResult) Response() *http.Response {
	return fsr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fsr FileStatusesResult) StatusCode() int {
	return fsr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fsr FileStatusesResult) Status() string {
	return fsr.rawResponse.Status
}

// FileStatusProperties - Data Lake Store file or directory information.
type FileStatusProperties struct {
	// AccessTime - the last access time as ticks since the epoch.
	AccessTime *int64 `json:"accessTime,omitempty"`
	// BlockSize - the block size for the file.
	BlockSize *int64 `json:"blockSize,omitempty"`
	// ChildrenNum - the number of children in the directory.
	ChildrenNum *int64 `json:"childrenNum,omitempty"`
	// ExpirationTime - Gets the expiration time, if any, as ticks since the epoch. If this is set to 0 or DateTime.MaxValue there is no expiration.
	ExpirationTime *int64 `json:"expirationTime,omitempty"`
	// Group - the group owner.
	Group *string `json:"group,omitempty"`
	// Length - the number of bytes in a file.
	Length *int64 `json:"length,omitempty"`
	// ModificationTime - the modification time as ticks since the epoch.
	ModificationTime *int64 `json:"modificationTime,omitempty"`
	// Owner - the user who is the owner.
	Owner *string `json:"owner,omitempty"`
	// PathSuffix - the path suffix.
	PathSuffix *string `json:"pathSuffix,omitempty"`
	// Permission - the permission represented as an string.
	Permission *string `json:"permission,omitempty"`
	// Type - the type of the path object. Possible values include: 'FILE', 'DIRECTORY', 'None'
	Type FileType `json:"type,omitempty"`
}

// FileStatusResult - Data Lake Store filesystem file status information response.
type FileStatusResult struct {
	rawResponse *http.Response
	// FileStatus - the file status object associated with the specified path.
	FileStatus *FileStatusProperties `json:"FileStatus,omitempty"`
}

// Response returns the raw HTTP response object.
func (fsr FileStatusResult) Response() *http.Response {
	return fsr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fsr FileStatusResult) StatusCode() int {
	return fsr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fsr FileStatusResult) Status() string {
	return fsr.rawResponse.Status
}

// OpenResponse ...
type OpenResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (or OpenResponse) Response() *http.Response {
	return or.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (or OpenResponse) StatusCode() int {
	return or.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (or OpenResponse) Status() string {
	return or.rawResponse.Status
}

// Body returns the raw HTTP response object's Body.
func (or OpenResponse) Body() io.ReadCloser {
	return or.rawResponse.Body
}
