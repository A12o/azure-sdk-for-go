package commitmentplans

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type commitmentAssociationProperties struct {
	AssociatedResourceID *string      `json:"associatedResourceId,omitempty"`
	CommitmentPlanID     *string      `json:"commitmentPlanId,omitempty"`
	CreationDate         *timeRFC3339 `json:"creationDate,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for CommitmentAssociationProperties.
func (capVar CommitmentAssociationProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*CommitmentAssociationProperties)(nil)).Elem().Size() != reflect.TypeOf((*commitmentAssociationProperties)(nil)).Elem().Size() {
		panic("size mismatch between CommitmentAssociationProperties and commitmentAssociationProperties")
	}
	capVar2 := (*commitmentAssociationProperties)(unsafe.Pointer(&capVar))
	return e.EncodeElement(*capVar2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for CommitmentAssociationProperties.
func (capVar *CommitmentAssociationProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*CommitmentAssociationProperties)(nil)).Elem().Size() != reflect.TypeOf((*commitmentAssociationProperties)(nil)).Elem().Size() {
		panic("size mismatch between CommitmentAssociationProperties and commitmentAssociationProperties")
	}
	capVar2 := (*commitmentAssociationProperties)(unsafe.Pointer(capVar))
	return d.DecodeElement(capVar2, &start)
}

// internal type used for marshalling
type properties struct {
	ChargeForOverage      *bool                   `json:"chargeForOverage,omitempty"`
	ChargeForPlan         *bool                   `json:"chargeForPlan,omitempty"`
	CreationDate          *timeRFC3339            `json:"creationDate,omitempty"`
	IncludedQuantities    map[string]PlanQuantity `json:"includedQuantities,omitempty"`
	MaxAssociationLimit   *int32                  `json:"maxAssociationLimit,omitempty"`
	MaxCapacityLimit      *int32                  `json:"maxCapacityLimit,omitempty"`
	MinCapacityLimit      *int32                  `json:"minCapacityLimit,omitempty"`
	PlanMeter             *string                 `json:"planMeter,omitempty"`
	RefillFrequencyInDays *int32                  `json:"refillFrequencyInDays,omitempty"`
	SuspendPlanOnOverage  *bool                   `json:"suspendPlanOnOverage,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for Properties.
func (p Properties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*Properties)(nil)).Elem().Size() != reflect.TypeOf((*properties)(nil)).Elem().Size() {
		panic("size mismatch between Properties and properties")
	}
	p2 := (*properties)(unsafe.Pointer(&p))
	return e.EncodeElement(*p2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for Properties.
func (p *Properties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*Properties)(nil)).Elem().Size() != reflect.TypeOf((*properties)(nil)).Elem().Size() {
		panic("size mismatch between Properties and properties")
	}
	p2 := (*properties)(unsafe.Pointer(p))
	return d.DecodeElement(p2, &start)
}

// internal type used for marshalling
type planUsageHistory struct {
	PlanDeletionOverage       map[string]float64 `json:"planDeletionOverage,omitempty"`
	PlanMigrationOverage      map[string]float64 `json:"planMigrationOverage,omitempty"`
	PlanQuantitiesAfterUsage  map[string]float64 `json:"planQuantitiesAfterUsage,omitempty"`
	PlanQuantitiesBeforeUsage map[string]float64 `json:"planQuantitiesBeforeUsage,omitempty"`
	PlanUsageOverage          map[string]float64 `json:"planUsageOverage,omitempty"`
	Usage                     map[string]float64 `json:"usage,omitempty"`
	UsageDate                 *timeRFC3339       `json:"usageDate,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for PlanUsageHistory.
func (puh PlanUsageHistory) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*PlanUsageHistory)(nil)).Elem().Size() != reflect.TypeOf((*planUsageHistory)(nil)).Elem().Size() {
		panic("size mismatch between PlanUsageHistory and planUsageHistory")
	}
	puh2 := (*planUsageHistory)(unsafe.Pointer(&puh))
	return e.EncodeElement(*puh2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for PlanUsageHistory.
func (puh *PlanUsageHistory) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*PlanUsageHistory)(nil)).Elem().Size() != reflect.TypeOf((*planUsageHistory)(nil)).Elem().Size() {
		panic("size mismatch between PlanUsageHistory and planUsageHistory")
	}
	puh2 := (*planUsageHistory)(unsafe.Pointer(puh))
	return d.DecodeElement(puh2, &start)
}
