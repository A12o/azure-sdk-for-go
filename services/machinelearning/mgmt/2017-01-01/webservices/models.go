package webservices

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"net/http"
	"time"
)

// Metadata contains metadata key/value pairs.
type Metadata map[string]string

const mdPrefix = "x-ms-meta-"

const mdPrefixLen = len(mdPrefix)

// UnmarshalXML implements the xml.Unmarshaler interface for Metadata.
func (md *Metadata) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	tokName := ""
	for t, err := d.Token(); err == nil; t, err = d.Token() {
		switch tt := t.(type) {
		case xml.StartElement:
			tokName = strings.ToLower(tt.Name.Local)
			break
		case xml.CharData:
			if *md == nil {
				*md = Metadata{}
			}
			(*md)[tokName] = string(tt)
			break
		}
	}
	return nil
}

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// AssetType enumerates the values for asset type.
type AssetType string

const (
	// AssetModule ...
	AssetModule AssetType = "Module"
	// AssetNone represents an empty AssetType.
	AssetNone AssetType = ""
	// AssetResource ...
	AssetResource AssetType = "Resource"
)

// ColumnFormatType enumerates the values for column format.
type ColumnFormatType string

const (
	// ColumnFormatByte ...
	ColumnFormatByte ColumnFormatType = "Byte"
	// ColumnFormatChar ...
	ColumnFormatChar ColumnFormatType = "Char"
	// ColumnFormatComplex128 ...
	ColumnFormatComplex128 ColumnFormatType = "Complex128"
	// ColumnFormatComplex64 ...
	ColumnFormatComplex64 ColumnFormatType = "Complex64"
	// ColumnFormatDateTime ...
	ColumnFormatDateTime ColumnFormatType = "Date-time"
	// ColumnFormatDateTimeOffset ...
	ColumnFormatDateTimeOffset ColumnFormatType = "Date-timeOffset"
	// ColumnFormatDouble ...
	ColumnFormatDouble ColumnFormatType = "Double"
	// ColumnFormatDuration ...
	ColumnFormatDuration ColumnFormatType = "Duration"
	// ColumnFormatFloat ...
	ColumnFormatFloat ColumnFormatType = "Float"
	// ColumnFormatInt16 ...
	ColumnFormatInt16 ColumnFormatType = "Int16"
	// ColumnFormatInt32 ...
	ColumnFormatInt32 ColumnFormatType = "Int32"
	// ColumnFormatInt64 ...
	ColumnFormatInt64 ColumnFormatType = "Int64"
	// ColumnFormatInt8 ...
	ColumnFormatInt8 ColumnFormatType = "Int8"
	// ColumnFormatNone represents an empty ColumnFormatType.
	ColumnFormatNone ColumnFormatType = ""
	// ColumnFormatUint16 ...
	ColumnFormatUint16 ColumnFormatType = "Uint16"
	// ColumnFormatUint32 ...
	ColumnFormatUint32 ColumnFormatType = "Uint32"
	// ColumnFormatUint64 ...
	ColumnFormatUint64 ColumnFormatType = "Uint64"
	// ColumnFormatUint8 ...
	ColumnFormatUint8 ColumnFormatType = "Uint8"
)

// ColumnType enumerates the values for column type.
type ColumnType string

const (
	// ColumnBoolean ...
	ColumnBoolean ColumnType = "Boolean"
	// ColumnInteger ...
	ColumnInteger ColumnType = "Integer"
	// ColumnNone represents an empty ColumnType.
	ColumnNone ColumnType = ""
	// ColumnNumber ...
	ColumnNumber ColumnType = "Number"
	// ColumnString ...
	ColumnString ColumnType = "String"
)

// DiagnosticsLevelType enumerates the values for diagnostics level.
type DiagnosticsLevelType string

const (
	// DiagnosticsLevelAll ...
	DiagnosticsLevelAll DiagnosticsLevelType = "All"
	// DiagnosticsLevelError ...
	DiagnosticsLevelError DiagnosticsLevelType = "Error"
	// DiagnosticsLevelNone ...
	DiagnosticsLevelNone DiagnosticsLevelType = "None"
	// DiagnosticsLevelNone represents an empty DiagnosticsLevelType.
	DiagnosticsLevelNone DiagnosticsLevelType = ""
)

// InputPortType enumerates the values for input port type.
type InputPortType string

const (
	// InputPortDataset ...
	InputPortDataset InputPortType = "Dataset"
	// InputPortNone represents an empty InputPortType.
	InputPortNone InputPortType = ""
)

// OutputPortType enumerates the values for output port type.
type OutputPortType string

const (
	// OutputPortDataset ...
	OutputPortDataset OutputPortType = "Dataset"
	// OutputPortNone represents an empty OutputPortType.
	OutputPortNone OutputPortType = ""
)

// PackageType enumerates the values for package type.
type PackageType string

const (
	// PackagePackageTypeGraph ...
	PackagePackageTypeGraph PackageType = "Graph"
)

// ParameterType enumerates the values for parameter type.
type ParameterType string

const (
	// ParameterBoolean ...
	ParameterBoolean ParameterType = "Boolean"
	// ParameterColumnPicker ...
	ParameterColumnPicker ParameterType = "ColumnPicker"
	// ParameterCredential ...
	ParameterCredential ParameterType = "Credential"
	// ParameterDataGatewayName ...
	ParameterDataGatewayName ParameterType = "DataGatewayName"
	// ParameterDouble ...
	ParameterDouble ParameterType = "Double"
	// ParameterEnumerated ...
	ParameterEnumerated ParameterType = "Enumerated"
	// ParameterFloat ...
	ParameterFloat ParameterType = "Float"
	// ParameterInt ...
	ParameterInt ParameterType = "Int"
	// ParameterMode ...
	ParameterMode ParameterType = "Mode"
	// ParameterNone represents an empty ParameterType.
	ParameterNone ParameterType = ""
	// ParameterParameterRange ...
	ParameterParameterRange ParameterType = "ParameterRange"
	// ParameterScript ...
	ParameterScript ParameterType = "Script"
	// ParameterString ...
	ParameterString ParameterType = "String"
)

// ProvisioningStateType enumerates the values for provisioning state.
type ProvisioningStateType string

const (
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningStateType = "Failed"
	// ProvisioningStateNone represents an empty ProvisioningStateType.
	ProvisioningStateNone ProvisioningStateType = ""
	// ProvisioningStateProvisioning ...
	ProvisioningStateProvisioning ProvisioningStateType = "Provisioning"
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningStateType = "Succeeded"
	// ProvisioningStateUnknown ...
	ProvisioningStateUnknown ProvisioningStateType = "Unknown"
)

// AssetItem - Information about an asset associated with the web service.
type AssetItem struct {
	// Name - Asset's friendly name.
	Name string `json:"name,omitempty"`
	// ID - Asset's Id.
	ID *string `json:"id,omitempty"`
	// Type - Asset's type. Possible values include: 'Module', 'Resource', 'None'
	Type AssetType `json:"type,omitempty"`
	// LocationInfo - Access information for the asset.
	LocationInfo BlobLocation `json:"locationInfo,omitempty"`
	// InputPorts - Information about the asset's input ports.
	InputPorts map[string]InputPort `json:"inputPorts,omitempty"`
	// OutputPorts - Information about the asset's output ports.
	OutputPorts map[string]OutputPort `json:"outputPorts,omitempty"`
	// Metadata - If the asset is a custom module, this holds the module's metadata.
	Metadata Metadata `json:"metadata,omitempty"`
	// Parameters - If the asset is a custom module, this holds the module's parameters.
	Parameters []ModuleAssetParameter `json:"parameters,omitempty"`
}

// AsyncOperationErrorInfo - The error detail information for async operation
type AsyncOperationErrorInfo struct {
	// Code - The error code.
	Code *string `json:"code,omitempty"`
	// Target - The error target.
	Target *string `json:"target,omitempty"`
	// Message - The error message.
	Message *string `json:"message,omitempty"`
	// Details - An array containing error information.
	Details []AsyncOperationErrorInfo `json:"details,omitempty"`
}

// AsyncOperationStatus - Azure async operation status.
type AsyncOperationStatus struct {
	rawResponse *http.Response
	// ID - Async operation id.
	ID *string `json:"id,omitempty"`
	// Name - Async operation name.
	Name *string `json:"name,omitempty"`
	// ProvisioningState - Read Only: The provisioning state of the web service. Valid values are Unknown, Provisioning, Succeeded, and Failed. Possible values include: 'Unknown', 'Provisioning', 'Succeeded', 'Failed', 'None'
	ProvisioningState ProvisioningStateType `json:"provisioningState,omitempty"`
	// StartTime - The date time that the async operation started.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - The date time that the async operation finished.
	EndTime *time.Time `json:"endTime,omitempty"`
	// PercentComplete - Async operation progress.
	PercentComplete *float64 `json:"percentComplete,omitempty"`
	// ErrorInfo - If the async operation fails, this structure contains the error details.
	ErrorInfo *AsyncOperationErrorInfo `json:"errorInfo,omitempty"`
}

// Response returns the raw HTTP response object.
func (aos AsyncOperationStatus) Response() *http.Response {
	return aos.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (aos AsyncOperationStatus) StatusCode() int {
	return aos.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (aos AsyncOperationStatus) Status() string {
	return aos.rawResponse.Status
}

// BlobLocation - Describes the access location for a blob.
type BlobLocation struct {
	// URI - The URI from which the blob is accessible from. For example, aml://abc for system assets or https://xyz for user assets or payload.
	URI string `json:"uri,omitempty"`
	// Credentials - Access credentials for the blob, if applicable (e.g. blob specified by storage account connection string + blob URI)
	Credentials *string `json:"credentials,omitempty"`
}

// ColumnSpecification - Swagger 2.0 schema for a column within the data table representing a web service input or
// output. See Swagger specification: http://swagger.io/specification/
type ColumnSpecification struct {
	// Type - Data type of the column. Possible values include: 'Boolean', 'Integer', 'Number', 'String', 'None'
	Type ColumnType `json:"type,omitempty"`
	// Format - Additional format information for the data type. Possible values include: 'Byte', 'Char', 'Complex64', 'Complex128', 'DateTime', 'DateTimeOffset', 'Double', 'Duration', 'Float', 'Int8', 'Int16', 'Int32', 'Int64', 'Uint8', 'Uint16', 'Uint32', 'Uint64', 'None'
	Format ColumnFormatType `json:"format,omitempty"`
	// Enum - If the data type is categorical, this provides the list of accepted categories.
	Enum []map[string]interface{} `json:"enum,omitempty"`
	// XMsIsnullable - Flag indicating if the type supports null values or not.
	XMsIsnullable *bool `json:"x-ms-isnullable,omitempty"`
	// XMsIsordered - Flag indicating whether the categories are treated as an ordered set or not, if this is a categorical column.
	XMsIsordered *bool `json:"x-ms-isordered,omitempty"`
}

// CommitmentPlan - Information about the machine learning commitment plan associated with the web service.
type CommitmentPlan struct {
	// ID - Specifies the Azure Resource Manager ID of the commitment plan associated with the web service.
	ID string `json:"id,omitempty"`
}

// DiagnosticsConfiguration - Diagnostics settings for an Azure ML web service.
type DiagnosticsConfiguration struct {
	// Level - Specifies the verbosity of the diagnostic output. Valid values are: None - disables tracing; Error - collects only error (stderr) traces; All - collects all traces (stdout and stderr). Possible values include: 'None', 'Error', 'All', 'None'
	Level DiagnosticsLevelType `json:"level,omitempty"`
	// Expiry - Specifies the date and time when the logging will cease. If null, diagnostic collection is not time limited.
	Expiry *time.Time `json:"expiry,omitempty"`
}

// ExampleRequest - Sample input data for the service's input(s).
type ExampleRequest struct {
	// Inputs - Sample input data for the web service's input(s) given as an input name to sample input values matrix map.
	Inputs map[string][][]map[string]interface{} `json:"inputs,omitempty"`
	// GlobalParameters - Sample input data for the web service's global parameters
	GlobalParameters map[string]map[string]interface{} `json:"globalParameters,omitempty"`
}

// GraphEdge - Defines an edge within the web service's graph.
type GraphEdge struct {
	// SourceNodeID - The source graph node's identifier.
	SourceNodeID *string `json:"sourceNodeId,omitempty"`
	// SourcePortID - The identifier of the source node's port that the edge connects from.
	SourcePortID *string `json:"sourcePortId,omitempty"`
	// TargetNodeID - The destination graph node's identifier.
	TargetNodeID *string `json:"targetNodeId,omitempty"`
	// TargetPortID - The identifier of the destination node's port that the edge connects into.
	TargetPortID *string `json:"targetPortId,omitempty"`
}

// GraphNode - Specifies a node in the web service graph. The node can either be an input, output or asset node, so
// only one of the corresponding id properties is populated at any given time.
type GraphNode struct {
	// AssetID - The id of the asset represented by this node.
	AssetID *string `json:"assetId,omitempty"`
	// InputID - The id of the input element represented by this node.
	InputID *string `json:"inputId,omitempty"`
	// OutputID - The id of the output element represented by this node.
	OutputID *string `json:"outputId,omitempty"`
	// Parameters - If applicable, parameters of the node. Global graph parameters map into these, with values set at runtime.
	Parameters map[string]Parameter `json:"parameters,omitempty"`
}

// GraphPackage - Defines the graph of modules making up the machine learning solution.
type GraphPackage struct {
	// Nodes - The set of nodes making up the graph, provided as a nodeId to GraphNode map
	Nodes map[string]GraphNode `json:"nodes,omitempty"`
	// Edges - The list of edges making up the graph.
	Edges []GraphEdge `json:"edges,omitempty"`
	// GraphParameters - The collection of global parameters for the graph, given as a global parameter name to GraphParameter map. Each parameter here has a 1:1 match with the global parameters values map declared at the WebServiceProperties level.
	GraphParameters map[string]GraphParameter `json:"graphParameters,omitempty"`
}

// GraphParameter - Defines a global parameter in the graph.
type GraphParameter struct {
	// Description - Description of this graph parameter.
	Description *string `json:"description,omitempty"`
	// Type - Graph parameter's type. Possible values include: 'String', 'Int', 'Float', 'Enumerated', 'Script', 'Mode', 'Credential', 'Boolean', 'Double', 'ColumnPicker', 'ParameterRange', 'DataGatewayName', 'None'
	Type ParameterType `json:"type,omitempty"`
	// Links - Association links for this parameter to nodes in the graph.
	Links []GraphParameterLink `json:"links,omitempty"`
}

// GraphParameterLink - Association link for a graph global parameter to a node in the graph.
type GraphParameterLink struct {
	// NodeID - The graph node's identifier
	NodeID string `json:"nodeId,omitempty"`
	// ParameterKey - The identifier of the node parameter that the global parameter maps to.
	ParameterKey string `json:"parameterKey,omitempty"`
}

// InputPort - Asset input port
type InputPort struct {
	// Type - Port data type. Possible values include: 'Dataset', 'None'
	Type InputPortType `json:"type,omitempty"`
}

// Keys - Access keys for the web service calls.
type Keys struct {
	rawResponse *http.Response
	// Primary - The primary access key.
	Primary *string `json:"primary,omitempty"`
	// Secondary - The secondary access key.
	Secondary *string `json:"secondary,omitempty"`
}

// Response returns the raw HTTP response object.
func (k Keys) Response() *http.Response {
	return k.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (k Keys) StatusCode() int {
	return k.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (k Keys) Status() string {
	return k.rawResponse.Status
}

// MachineLearningWorkspace - Information about the machine learning workspace containing the experiment that is source
// for the web service.
type MachineLearningWorkspace struct {
	// ID - Specifies the workspace ID of the machine learning workspace associated with the web service
	ID string `json:"id,omitempty"`
}

// ModeValueInfo - Nested parameter definition.
type ModeValueInfo struct {
	// InterfaceString - The interface string name for the nested parameter.
	InterfaceString *string `json:"interfaceString,omitempty"`
	// Parameters - The definition of the parameter.
	Parameters []ModuleAssetParameter `json:"parameters,omitempty"`
}

// ModuleAssetParameter - Parameter definition for a module asset.
type ModuleAssetParameter struct {
	// Name - Parameter name.
	Name *string `json:"name,omitempty"`
	// ParameterType - Parameter type.
	ParameterType *string `json:"parameterType,omitempty"`
	// ModeValuesInfo - Definitions for nested interface parameters if this is a complex module parameter.
	ModeValuesInfo map[string]ModeValueInfo `json:"modeValuesInfo,omitempty"`
}

// OutputPort - Asset output port
type OutputPort struct {
	// Type - Port data type. Possible values include: 'Dataset', 'None'
	Type OutputPortType `json:"type,omitempty"`
}

// PaginatedWebServicesList - Paginated list of web services.
type PaginatedWebServicesList struct {
	rawResponse *http.Response
	// Value - An array of web service objects.
	Value []WebService `json:"value,omitempty"`
	// NextLink - A continuation link (absolute URI) to the next page of results in the list.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (pwsl PaginatedWebServicesList) Response() *http.Response {
	return pwsl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pwsl PaginatedWebServicesList) StatusCode() int {
	return pwsl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pwsl PaginatedWebServicesList) Status() string {
	return pwsl.rawResponse.Status
}

// Parameter - Web Service Parameter object for node and global parameter
type Parameter struct {
	// Value - The parameter value
	Value map[string]interface{} `json:"value,omitempty"`
	// CertificateThumbprint - If the parameter value in 'value' field is encrypted, the thumbprint of the certificate should be put here.
	CertificateThumbprint *string `json:"certificateThumbprint,omitempty"`
}

type Properties interface {
	AsPropertiesForGraph() (*PropertiesForGraph, bool)
}

func unmarshalProperties(body []byte) (Properties, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["packageType"] {
	case string(PackageTypeGraph):
		var pfg PropertiesForGraph
		err := json.Unmarshal(body, &pfg)
		return pfg, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalPropertiesArray(body []byte) ([]Properties, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	pArray := make([]Properties, len(rawMessages))

	for index, rawMessage := range rawMessages {
		p, err := unmarshalProperties(*rawMessage)
		if err != nil {
			return nil, err
		}
		pArray[index] = p
	}
	return pArray, nil
}

// PropertiesForGraph - Properties specific to a Graph based web service.
type PropertiesForGraph struct {
	// Title - The title of the web service.
	Title *string `json:"title,omitempty"`
	// Description - The description of the web service.
	Description *string `json:"description,omitempty"`
	// CreatedOn - Read Only: The date and time when the web service was created.
	CreatedOn *time.Time `json:"createdOn,omitempty"`
	// ModifiedOn - Read Only: The date and time when the web service was last modified.
	ModifiedOn *time.Time `json:"modifiedOn,omitempty"`
	// ProvisioningState - Read Only: The provision state of the web service. Valid values are Unknown, Provisioning, Succeeded, and Failed. Possible values include: 'Unknown', 'Provisioning', 'Succeeded', 'Failed', 'None'
	ProvisioningState ProvisioningStateType `json:"provisioningState,omitempty"`
	// Keys - Contains the web service provisioning keys. If you do not specify provisioning keys, the Azure Machine Learning system generates them for you. Note: The keys are not returned from calls to GET operations.
	Keys *Keys `json:"keys,omitempty"`
	// ReadOnly - When set to true, indicates that the web service is read-only and can no longer be updated or patched, only removed. Default, is false. Note: Once set to true, you cannot change its value.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SwaggerLocation - Read Only: Contains the URI of the swagger spec associated with this web service.
	SwaggerLocation *string `json:"swaggerLocation,omitempty"`
	// ExposeSampleData - When set to true, sample data is included in the web service's swagger definition. The default value is true.
	ExposeSampleData *bool `json:"exposeSampleData,omitempty"`
	// RealtimeConfiguration - Contains the configuration settings for the web service endpoint.
	RealtimeConfiguration *RealtimeConfiguration `json:"realtimeConfiguration,omitempty"`
	// Diagnostics - Settings controlling the diagnostics traces collection for the web service.
	Diagnostics *DiagnosticsConfiguration `json:"diagnostics,omitempty"`
	// StorageAccount - Specifies the storage account that Azure Machine Learning uses to store information about the web service. Only the name of the storage account is returned from calls to GET operations. When updating the storage account information, you must ensure that all necessary assets are available in the new storage account or calls to your web service will fail.
	StorageAccount *StorageAccount `json:"storageAccount,omitempty"`
	// MachineLearningWorkspace - Specifies the Machine Learning workspace containing the experiment that is source for the web service.
	MachineLearningWorkspace *MachineLearningWorkspace `json:"machineLearningWorkspace,omitempty"`
	// CommitmentPlan - Contains the commitment plan associated with this web service. Set at creation time. Once set, this value cannot be changed. Note: The commitment plan is not returned from calls to GET operations.
	CommitmentPlan *CommitmentPlan `json:"commitmentPlan,omitempty"`
	// Input - Contains the Swagger 2.0 schema describing one or more of the web service's inputs. For more information, see the Swagger specification.
	Input *ServiceInputOutputSpecification `json:"input,omitempty"`
	// Output - Contains the Swagger 2.0 schema describing one or more of the web service's outputs. For more information, see the Swagger specification.
	Output *ServiceInputOutputSpecification `json:"output,omitempty"`
	// ExampleRequest - Defines sample input data for one or more of the service's inputs.
	ExampleRequest *ExampleRequest `json:"exampleRequest,omitempty"`
	// Assets - Contains user defined properties describing web service assets. Properties are expressed as Key/Value pairs.
	Assets map[string]AssetItem `json:"assets,omitempty"`
	// Parameters - The set of global parameters values defined for the web service, given as a global parameter name to default value map. If no default value is specified, the parameter is considered to be required.
	Parameters map[string]Parameter `json:"parameters,omitempty"`
	// PayloadsInBlobStorage - When set to true, indicates that the payload size is larger than 3 MB. Otherwise false. If the payload size exceed 3 MB, the payload is stored in a blob and the PayloadsLocation parameter contains the URI of the blob. Otherwise, this will be set to false and Assets, Input, Output, Package, Parameters, ExampleRequest are inline. The Payload sizes is determined by adding the size of the Assets, Input, Output, Package, Parameters, and the ExampleRequest.
	PayloadsInBlobStorage *bool `json:"payloadsInBlobStorage,omitempty"`
	// PayloadsLocation - The URI of the payload blob. This paramater contains a value only if the payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
	PayloadsLocation *BlobLocation `json:"payloadsLocation,omitempty"`
	// PackageType - Possible values include: 'PackageTypeGraph'
	PackageType PackageType `json:"packageType,omitempty"`
	// Package - The definition of the graph package making up this web service.
	Package *GraphPackage `json:"package,omitempty"`
}

// MarshalJSON is the custom marshaler for PropertiesForGraph.
func (pfg PropertiesForGraph) MarshalJSON() ([]byte, error) {
	pfg.PackageType = PackageTypeGraph
	type Alias PropertiesForGraph
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(pfg),
	})
}

// AsPropertiesForGraph is the Properties implementation for PropertiesForGraph.
func (pfg PropertiesForGraph) AsPropertiesForGraph() (*PropertiesForGraph, bool) {
	return &pfg, true
}

// RealtimeConfiguration - Holds the available configuration options for an Azure ML web service endpoint.
type RealtimeConfiguration struct {
	// MaxConcurrentCalls - Specifies the maximum concurrent calls that can be made to the web service. Minimum value: 4, Maximum value: 200.
	MaxConcurrentCalls *int32 `json:"maxConcurrentCalls,omitempty"`
}

// Resource - Azure resource.
type Resource struct {
	// ID - Specifies the resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Specifies the name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Specifies the location of the resource.
	Location string `json:"location,omitempty"`
	// Type - Specifies the type of the resource.
	Type *string `json:"type,omitempty"`
	// Tags - Contains resource tags defined as key/value pairs.
	Tags map[string]string `json:"tags,omitempty"`
}

// ServiceInputOutputSpecification - The swagger 2.0 schema describing the service's inputs or outputs. See Swagger
// specification: http://swagger.io/specification/
type ServiceInputOutputSpecification struct {
	// Title - The title of your Swagger schema.
	Title *string `json:"title,omitempty"`
	// Description - The description of the Swagger schema.
	Description *string `json:"description,omitempty"`
	// Type - The type of the entity described in swagger. Always 'object'.
	Type string `json:"type,omitempty"`
	// Properties - Specifies a collection that contains the column schema for each input or output of the web service. For more information, see the Swagger specification.
	Properties map[string]TableSpecification `json:"properties,omitempty"`
}

// StorageAccount - Access information for a storage account.
type StorageAccount struct {
	// Name - Specifies the name of the storage account.
	Name *string `json:"name,omitempty"`
	// Key - Specifies the key used to access the storage account.
	Key *string `json:"key,omitempty"`
}

// TableSpecification - The swagger 2.0 schema describing a single service input or output. See Swagger specification:
// http://swagger.io/specification/
type TableSpecification struct {
	// Title - Swagger schema title.
	Title *string `json:"title,omitempty"`
	// Description - Swagger schema description.
	Description *string `json:"description,omitempty"`
	// Type - The type of the entity described in swagger.
	Type string `json:"type,omitempty"`
	// Format - The format, if 'type' is not 'object'
	Format *string `json:"format,omitempty"`
	// Properties - The set of columns within the data table.
	Properties map[string]ColumnSpecification `json:"properties,omitempty"`
}

// WebService - Instance of an Azure ML web service resource.
type WebService struct {
	rawResponse *http.Response
	// ID - Specifies the resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Specifies the name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Specifies the location of the resource.
	Location string `json:"location,omitempty"`
	// Type - Specifies the type of the resource.
	Type *string `json:"type,omitempty"`
	// Tags - Contains resource tags defined as key/value pairs.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - Contains the property payload that describes the web service.
	Properties Properties `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for WebService struct.
func (ws *WebService) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalProperties(*m["properties"])
		if err != nil {
			return err
		}
		ws.Properties = properties
	}

	v = m["id"]
	if v != nil {
		var ID string
		err = json.Unmarshal(*m["id"], &ID)
		if err != nil {
			return err
		}
		ws.ID = &ID
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		ws.Name = &name
	}

	v = m["location"]
	if v != nil {
		var location string
		err = json.Unmarshal(*m["location"], &location)
		if err != nil {
			return err
		}
		ws.Location = &location
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		ws.Type = &typeVar
	}

	v = m["tags"]
	if v != nil {
		var tags map[string]string
		err = json.Unmarshal(*m["tags"], &tags)
		if err != nil {
			return err
		}
		ws.Tags = &tags
	}

	return nil
}

// Response returns the raw HTTP response object.
func (ws WebService) Response() *http.Response {
	return ws.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ws WebService) StatusCode() int {
	return ws.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ws WebService) Status() string {
	return ws.rawResponse.Status
}
