package contentmoderator

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
)

// ListManagementImageClient is the you use the API to scan your content as it is generated. Content Moderator then
// processes your content and sends the results along with relevant information either back to your systems or to the
// built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.
//
// When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.
// Text can be at most 1024 characters long.
// If the content passed to the text API or the image API exceeds the size limits, the API will return an error code
// that informs about the issue.
//
// This API is currently available in:
//
// * West US - westus.api.cognitive.microsoft.com
// * East US 2 - eastus2.api.cognitive.microsoft.com
// * West Central US - westcentralus.api.cognitive.microsoft.com
// * West Europe - westeurope.api.cognitive.microsoft.com
// * Southeast Asia - southeastasia.api.cognitive.microsoft.com .
type ListManagementImageClient struct {
	ManagementClient
}

// NewListManagementImageClient creates an instance of the ListManagementImageClient client.
func NewListManagementImageClient(url url.URL, p pipeline.Pipeline) ListManagementImageClient {
	return ListManagementImageClient{NewManagementClient(url, p)}
}

// AddImage add an image to the list with list Id equal to list Id passed.
//
// listID is list Id of the image list. tag is tag for the image. label is the image label.
func (client ListManagementImageClient) AddImage(ctx context.Context, listID string, tag *int32, label *string) (*Image, error) {
	req, err := client.addImagePreparer(listID, tag, label)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.addImageResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Image), err
}

// addImagePreparer prepares the AddImage request.
func (client ListManagementImageClient) addImagePreparer(listID string, tag *int32, label *string) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("POST", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if tag != nil {
		params.Set("tag", fmt.Sprintf("%v", *tag))
	}
	if label != nil {
		params.Set("label", *label)
	}
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// addImageResponder handles the response to the AddImage request.
func (client ListManagementImageClient) addImageResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Image{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// AddImageFileInput add an image to the list with list Id equal to list Id passed.
//
// listID is list Id of the image list. imageStream is the image file. imageStream will be closed upon successful
// return. Callers should ensure closure when receiving an error.tag is tag for the image. label is the image label.
func (client ListManagementImageClient) AddImageFileInput(ctx context.Context, listID string, body io.ReadSeeker, tag *int32, label *string) (*Image, error) {
	if err := validate([]validation{
		{targetValue: imageStream,
			constraints: []constraint{{target: "imageStream", name: null, rule: true, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.addImageFileInputPreparer(listID, body, tag, label)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.addImageFileInputResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Image), err
}

// addImageFileInputPreparer prepares the AddImageFileInput request.
func (client ListManagementImageClient) addImageFileInputPreparer(listID string, body io.ReadSeeker, tag *int32, label *string) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("POST", client.url, body)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if tag != nil {
		params.Set("tag", fmt.Sprintf("%v", *tag))
	}
	if label != nil {
		params.Set("label", *label)
	}
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// addImageFileInputResponder handles the response to the AddImageFileInput request.
func (client ListManagementImageClient) addImageFileInputResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Image{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// AddImageURLInput add an image to the list with list Id equal to list Id passed.
//
// listID is list Id of the image list. contentType is the content type. imageURL is the image url. tag is tag for the
// image. label is the image label.
func (client ListManagementImageClient) AddImageURLInput(ctx context.Context, listID string, contentType string, imageURL ImageURL, tag *int32, label *string) (*Image, error) {
	req, err := client.addImageURLInputPreparer(listID, contentType, imageURL, tag, label)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.addImageURLInputResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Image), err
}

// addImageURLInputPreparer prepares the AddImageURLInput request.
func (client ListManagementImageClient) addImageURLInputPreparer(listID string, contentType string, imageURL ImageURL, tag *int32, label *string) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("POST", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if tag != nil {
		params.Set("tag", fmt.Sprintf("%v", *tag))
	}
	if label != nil {
		params.Set("label", *label)
	}
	req.URL.RawQuery = params.Encode()
	req.Header.Set("Content-Type", contentType)
	b, err := json.Marshal(imageURL)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// addImageURLInputResponder handles the response to the AddImageURLInput request.
func (client ListManagementImageClient) addImageURLInputResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Image{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// DeleteAllImages deletes all images from the list with list Id equal to list Id passed.
//
// listID is list Id of the image list.
func (client ListManagementImageClient) DeleteAllImages(ctx context.Context, listID string) (*DeleteAllImagesResponse, error) {
	req, err := client.deleteAllImagesPreparer(listID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteAllImagesResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DeleteAllImagesResponse), err
}

// deleteAllImagesPreparer prepares the DeleteAllImages request.
func (client ListManagementImageClient) deleteAllImagesPreparer(listID string) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("DELETE", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// deleteAllImagesResponder handles the response to the DeleteAllImages request.
func (client ListManagementImageClient) deleteAllImagesResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DeleteAllImagesResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// DeleteImage deletes an image from the list with list Id and image Id passed.
//
// listID is list Id of the image list. imageID is id of the image.
func (client ListManagementImageClient) DeleteImage(ctx context.Context, listID string, imageID string) (*DeleteImageResponse, error) {
	req, err := client.deleteImagePreparer(listID, imageID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteImageResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DeleteImageResponse), err
}

// deleteImagePreparer prepares the DeleteImage request.
func (client ListManagementImageClient) deleteImagePreparer(listID string, imageID string) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("DELETE", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// deleteImageResponder handles the response to the DeleteImage request.
func (client ListManagementImageClient) deleteImageResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DeleteImageResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetAllImageIds gets all image Ids from the list with list Id equal to list Id passed.
//
// listID is list Id of the image list.
func (client ListManagementImageClient) GetAllImageIds(ctx context.Context, listID string) (*ImageIds, error) {
	req, err := client.getAllImageIdsPreparer(listID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getAllImageIdsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*ImageIds), err
}

// getAllImageIdsPreparer prepares the GetAllImageIds request.
func (client ListManagementImageClient) getAllImageIdsPreparer(listID string) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("GET", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getAllImageIdsResponder handles the response to the GetAllImageIds request.
func (client ListManagementImageClient) getAllImageIdsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &ImageIds{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
