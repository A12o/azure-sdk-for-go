package registeredidentities

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// AuthType enumerates the values for auth type.
type AuthType string

const (
	// AAD specifies the aad state for auth type.
	AAD AuthType = "AAD"
	// AccessControlService specifies the access control service state for auth
	// type.
	AccessControlService AuthType = "AccessControlService"
	// ACS specifies the acs state for auth type.
	ACS AuthType = "ACS"
	// AzureActiveDirectory specifies the azure active directory state for auth
	// type.
	AzureActiveDirectory AuthType = "AzureActiveDirectory"
	// Invalid specifies the invalid state for auth type.
	Invalid AuthType = "Invalid"
)

// CertificateRequest is details of the certificate to be uploaded to the
// vault.
type CertificateRequest struct {
	Properties *RawCertificateData `json:"properties,omitempty"`
}

// ClientDiscoveryDisplay is localized display information of an operation.
type ClientDiscoveryDisplay struct {
	Provider    *string `json:"Provider,omitempty"`
	Resource    *string `json:"Resource,omitempty"`
	Operation   *string `json:"Operation,omitempty"`
	Description *string `json:"Description,omitempty"`
}

// ClientDiscoveryForLogSpecification is log specification for the operation.
type ClientDiscoveryForLogSpecification struct {
	Name         *string    `json:"name,omitempty"`
	DisplayName  *string    `json:"displayName,omitempty"`
	BlobDuration *date.Time `json:"blobDuration,omitempty"`
}

// ClientDiscoveryForServiceSpecification is operation properties.
type ClientDiscoveryForServiceSpecification struct {
	LogSpecifications *[]ClientDiscoveryForLogSpecification `json:"logSpecifications,omitempty"`
}

// ClientDiscoveryProperties is operation properties.
type ClientDiscoveryProperties struct {
	ServiceSpecification *ClientDiscoveryForServiceSpecification `json:"serviceSpecification,omitempty"`
}

// ClientDiscoveryResponse is list of available operations.
type ClientDiscoveryResponse struct {
	autorest.Response `json:"-"`
	Value             *[]ClientDiscoveryValueForSingleAPI `json:"Value,omitempty"`
	NextLink          *string                             `json:"NextLink,omitempty"`
}

// ClientDiscoveryResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ClientDiscoveryResponse) ClientDiscoveryResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ClientDiscoveryValueForSingleAPI is available operation details.
type ClientDiscoveryValueForSingleAPI struct {
	Name                       *string                 `json:"Name,omitempty"`
	Display                    *ClientDiscoveryDisplay `json:"Display,omitempty"`
	Origin                     *string                 `json:"Origin,omitempty"`
	*ClientDiscoveryProperties `json:"Properties,omitempty"`
}

// RawCertificateData is raw certificate data.
type RawCertificateData struct {
	AuthType    AuthType `json:"authType,omitempty"`
	Certificate *[]byte  `json:"certificate,omitempty"`
}

// ResourceCertificateAndAadDetails is certificate details representing the
// Vault credentials for AAD.
type ResourceCertificateAndAadDetails struct {
	Certificate                     *[]byte    `json:"certificate,omitempty"`
	FriendlyName                    *string    `json:"friendlyName,omitempty"`
	Issuer                          *string    `json:"issuer,omitempty"`
	ResourceID                      *int64     `json:"resourceId,omitempty"`
	Subject                         *string    `json:"subject,omitempty"`
	Thumbprint                      *string    `json:"thumbprint,omitempty"`
	ValidFrom                       *date.Time `json:"validFrom,omitempty"`
	ValidTo                         *date.Time `json:"validTo,omitempty"`
	AadAuthority                    *string    `json:"aadAuthority,omitempty"`
	AadTenantID                     *string    `json:"aadTenantId,omitempty"`
	ServicePrincipalClientID        *string    `json:"servicePrincipalClientId,omitempty"`
	ServicePrincipalObjectID        *string    `json:"servicePrincipalObjectId,omitempty"`
	AzureManagementEndpointAudience *string    `json:"azureManagementEndpointAudience,omitempty"`
}

// ResourceCertificateAndAcsDetails is certificate details representing the
// Vault credentials for ACS.
type ResourceCertificateAndAcsDetails struct {
	Certificate        *[]byte    `json:"certificate,omitempty"`
	FriendlyName       *string    `json:"friendlyName,omitempty"`
	Issuer             *string    `json:"issuer,omitempty"`
	ResourceID         *int64     `json:"resourceId,omitempty"`
	Subject            *string    `json:"subject,omitempty"`
	Thumbprint         *string    `json:"thumbprint,omitempty"`
	ValidFrom          *date.Time `json:"validFrom,omitempty"`
	ValidTo            *date.Time `json:"validTo,omitempty"`
	GlobalAcsNamespace *string    `json:"globalAcsNamespace,omitempty"`
	GlobalAcsHostName  *string    `json:"globalAcsHostName,omitempty"`
	GlobalAcsRPRealm   *string    `json:"globalAcsRPRealm,omitempty"`
}

// ResourceCertificateDetails is certificate details representing the Vault
// credentials.
type ResourceCertificateDetails struct {
	Certificate  *[]byte    `json:"certificate,omitempty"`
	FriendlyName *string    `json:"friendlyName,omitempty"`
	Issuer       *string    `json:"issuer,omitempty"`
	ResourceID   *int64     `json:"resourceId,omitempty"`
	Subject      *string    `json:"subject,omitempty"`
	Thumbprint   *string    `json:"thumbprint,omitempty"`
	ValidFrom    *date.Time `json:"validFrom,omitempty"`
	ValidTo      *date.Time `json:"validTo,omitempty"`
}

// VaultCertificateResponse is certificate corresponding to a vault that can be
// used by clients to register themselves with the vault.
type VaultCertificateResponse struct {
	autorest.Response `json:"-"`
	Name              *string                     `json:"name,omitempty"`
	Type              *string                     `json:"type,omitempty"`
	ID                *string                     `json:"id,omitempty"`
	Properties        *ResourceCertificateDetails `json:"properties,omitempty"`
}
