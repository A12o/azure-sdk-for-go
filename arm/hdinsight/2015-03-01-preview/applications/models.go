package applications

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// Application is hDInsight cluster application
type Application struct {
	autorest.Response `json:"-"`
	ID                *SubResource        `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Etag              *string             `json:"etag,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	Properties        *GetProperties      `json:"properties,omitempty"`
}

// ComputeProfile is describes the compute profile.
type ComputeProfile struct {
	Roles *[]Role `json:"roles,omitempty"`
}

// Errors is the error message associated with the cluster creation.
type Errors struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetEndpoint is gets Application ssh endpoint
type GetEndpoint struct {
	Location        *string `json:"location,omitempty"`
	DestinationPort *int32  `json:"destinationPort,omitempty"`
	PublicPort      *int32  `json:"publicPort,omitempty"`
}

// GetHTTPSEndpoint is gets application Http endpoints.
type GetHTTPSEndpoint struct {
	AdditionalProperties *map[string]*string `json:",omitempty"`
	AccessModes          *[]string           `json:"accessModes,omitempty"`
	Location             *string             `json:"location,omitempty"`
	DestinationPort      *int32              `json:"destinationPort,omitempty"`
	PublicPort           *int32              `json:"publicPort,omitempty"`
}

// GetProperties is hDInsight cluster application.
type GetProperties struct {
	ComputeProfile         *ComputeProfile        `json:"computeProfile,omitempty"`
	InstallScriptActions   *[]RuntimeScriptAction `json:"installScriptActions,omitempty"`
	UninstallScriptActions *[]RuntimeScriptAction `json:"uninstallScriptActions,omitempty"`
	HTTPSEndpoints         *[]GetHTTPSEndpoint    `json:"httpsEndpoints,omitempty"`
	SSHEndpoints           *[]GetEndpoint         `json:"sshEndpoints,omitempty"`
	ProvisioningState      *string                `json:"provisioningState,omitempty"`
	ApplicationType        *string                `json:"applicationType,omitempty"`
	ApplicationState       *string                `json:"applicationState,omitempty"`
	Errors                 *[]Errors              `json:"errors,omitempty"`
	CreatedDate            *string                `json:"createdDate,omitempty"`
	MarketplaceIdentifier  *string                `json:"marketplaceIdentifier,omitempty"`
	AdditionalProperties   *string                `json:"additionalProperties,omitempty"`
}

// HardwareProfile is describes the hardware profile.
type HardwareProfile struct {
	VMSize *string `json:"vmSize,omitempty"`
}

// LinuxOperatingSystemProfile is the ssh username, password, and ssh public
// key.
type LinuxOperatingSystemProfile struct {
	Username   *string     `json:"username,omitempty"`
	Password   *string     `json:"password,omitempty"`
	SSHProfile *SSHProfile `json:"sshProfile,omitempty"`
}

// ListResult is result of the request to list cluster Applications. It
// contains a list of operations and a URL link to get the next set of results.
type ListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Application `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// ListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ListResult) ListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// OsProfile is the Windows operation systems profile, and configure remote
// desktop settings.
type OsProfile struct {
	WindowsOperatingSystemProfile *WindowsOperatingSystemProfile `json:"windowsOperatingSystemProfile,omitempty"`
	LinuxOperatingSystemProfile   *LinuxOperatingSystemProfile   `json:"linuxOperatingSystemProfile,omitempty"`
}

// RdpSettings is the RDP settings for the windows cluster.
type RdpSettings struct {
	Username   *string    `json:"username,omitempty"`
	Password   *string    `json:"password,omitempty"`
	ExpiryDate *date.Date `json:"expiryDate,omitempty"`
}

// Role is describes a role on the cluster.
type Role struct {
	Name                  *string                `json:"name,omitempty"`
	MinInstanceCount      *int32                 `json:"minInstanceCount,omitempty"`
	TargetInstanceCount   *int32                 `json:"targetInstanceCount,omitempty"`
	HardwareProfile       *HardwareProfile       `json:"hardwareProfile,omitempty"`
	OsProfile             *OsProfile             `json:"osProfile,omitempty"`
	VirtualNetworkProfile *VirtualNetworkProfile `json:"virtualNetworkProfile,omitempty"`
	ScriptActions         *[]ScriptAction        `json:"scriptActions,omitempty"`
}

// RuntimeScriptAction is describes a script action on a running cluster.
type RuntimeScriptAction struct {
	Name            *string   `json:"name,omitempty"`
	URI             *string   `json:"uri,omitempty"`
	Parameters      *string   `json:"parameters,omitempty"`
	Roles           *[]string `json:"roles,omitempty"`
	ApplicationName *string   `json:"applicationName,omitempty"`
}

// ScriptAction is describes a script action on role on the cluster.
type ScriptAction struct {
	Name       *string `json:"name,omitempty"`
	URI        *string `json:"uri,omitempty"`
	Parameters *string `json:"parameters,omitempty"`
}

// SSHProfile is the list of Ssh public keys.
type SSHProfile struct {
	PublicKeys *[]SSHPublicKey `json:"publicKeys,omitempty"`
}

// SSHPublicKey is the Ssh public key for the cluster nodes.
type SSHPublicKey struct {
	CertificateData *string `json:"certificateData,omitempty"`
}

// SubResource is the sub resource definition.
type SubResource struct {
	ID *string `json:"id,omitempty"`
}

// VirtualNetworkProfile is the Virtual network properties.
type VirtualNetworkProfile struct {
	ID     *string `json:"id,omitempty"`
	Subnet *string `json:"subnet,omitempty"`
}

// WindowsOperatingSystemProfile is the Windows operation system settings.
type WindowsOperatingSystemProfile struct {
	RdpSettings *RdpSettings `json:"rdpSettings,omitempty"`
}
