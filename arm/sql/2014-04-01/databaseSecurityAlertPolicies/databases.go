package databasesecurityalertpolicies

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
)

// DatabasesClient is the provides create, read and update functionality for
// database Threat Detection policies.
type DatabasesClient struct {
    ManagementClient
}
// NewDatabasesClient creates an instance of the DatabasesClient client.
func NewDatabasesClient(subscriptionID string) DatabasesClient {
        return NewDatabasesClientWithBaseURI(DefaultBaseURI, subscriptionID)
        }

// NewDatabasesClientWithBaseURI creates an instance of the DatabasesClient
// client.
    func NewDatabasesClientWithBaseURI(baseURI string, subscriptionID string) DatabasesClient {
        return DatabasesClient{ NewWithBaseURI(baseURI, subscriptionID)}
    }

// CreateOrUpdateThreatDetectionPolicy creates or updates a database's threat
// detection policy.
//
// resourceGroupName is the name of the resource group that contains the
// resource. You can obtain this value from the Azure Resource Manager API or
// the portal. serverName is the name of the server. databaseName is the name
// of the database for which database Threat Detection policy is defined.
// parameters is the database Threat Detection policy.
func (client DatabasesClient) CreateOrUpdateThreatDetectionPolicy(resourceGroupName string, serverName string, databaseName string, parameters DatabaseSecurityAlertPolicy) (result DatabaseSecurityAlertPolicy, err error) {
    req, err := client.CreateOrUpdateThreatDetectionPolicyPreparer(resourceGroupName, serverName, databaseName, parameters)
    if err != nil {
        err = autorest.NewErrorWithError(err, "databasesecurityalertpolicies.DatabasesClient", "CreateOrUpdateThreatDetectionPolicy", nil , "Failure preparing request")
        return
    }

    resp, err := client.CreateOrUpdateThreatDetectionPolicySender(req)
    if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "databasesecurityalertpolicies.DatabasesClient", "CreateOrUpdateThreatDetectionPolicy", resp, "Failure sending request")
        return
    }

    result, err = client.CreateOrUpdateThreatDetectionPolicyResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "databasesecurityalertpolicies.DatabasesClient", "CreateOrUpdateThreatDetectionPolicy", resp, "Failure responding to request")
    }

    return
}

// CreateOrUpdateThreatDetectionPolicyPreparer prepares the CreateOrUpdateThreatDetectionPolicy request.
func (client DatabasesClient) CreateOrUpdateThreatDetectionPolicyPreparer(resourceGroupName string, serverName string, databaseName string, parameters DatabaseSecurityAlertPolicy) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "databaseName": autorest.Encode("path",databaseName),
    "resourceGroupName": autorest.Encode("path",resourceGroupName),
    "serverName": autorest.Encode("path",serverName),
    "subscriptionId": autorest.Encode("path",client.SubscriptionID),
    }

        const APIVersion = "2014-04-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
                        autorest.AsJSON(),
                        autorest.AsPut(),
                        autorest.WithBaseURL(client.BaseURI),
                        autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/default",pathParameters),
                        autorest.WithJSON(parameters),
                        autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare(&http.Request{})
}

// CreateOrUpdateThreatDetectionPolicySender sends the CreateOrUpdateThreatDetectionPolicy request. The method will close the
// http.Response Body if it receives an error.
func (client DatabasesClient) CreateOrUpdateThreatDetectionPolicySender(req *http.Request) (*http.Response, error) {
    return autorest.SendWithSender(client, req)
}

// CreateOrUpdateThreatDetectionPolicyResponder handles the response to the CreateOrUpdateThreatDetectionPolicy request. The method always
// closes the http.Response Body.
func (client DatabasesClient) CreateOrUpdateThreatDetectionPolicyResponder(resp *http.Response) (result DatabaseSecurityAlertPolicy, err error) {
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
    return
}

// GetThreatDetectionPolicy gets a database's threat detection policy.
//
// resourceGroupName is the name of the resource group that contains the
// resource. You can obtain this value from the Azure Resource Manager API or
// the portal. serverName is the name of the server. databaseName is the name
// of the database for which database Threat Detection policy is defined.
func (client DatabasesClient) GetThreatDetectionPolicy(resourceGroupName string, serverName string, databaseName string) (result DatabaseSecurityAlertPolicy, err error) {
    req, err := client.GetThreatDetectionPolicyPreparer(resourceGroupName, serverName, databaseName)
    if err != nil {
        err = autorest.NewErrorWithError(err, "databasesecurityalertpolicies.DatabasesClient", "GetThreatDetectionPolicy", nil , "Failure preparing request")
        return
    }

    resp, err := client.GetThreatDetectionPolicySender(req)
    if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "databasesecurityalertpolicies.DatabasesClient", "GetThreatDetectionPolicy", resp, "Failure sending request")
        return
    }

    result, err = client.GetThreatDetectionPolicyResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "databasesecurityalertpolicies.DatabasesClient", "GetThreatDetectionPolicy", resp, "Failure responding to request")
    }

    return
}

// GetThreatDetectionPolicyPreparer prepares the GetThreatDetectionPolicy request.
func (client DatabasesClient) GetThreatDetectionPolicyPreparer(resourceGroupName string, serverName string, databaseName string) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "databaseName": autorest.Encode("path",databaseName),
    "resourceGroupName": autorest.Encode("path",resourceGroupName),
    "serverName": autorest.Encode("path",serverName),
    "subscriptionId": autorest.Encode("path",client.SubscriptionID),
    }

        const APIVersion = "2014-04-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
                        autorest.AsGet(),
                        autorest.WithBaseURL(client.BaseURI),
                        autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/default",pathParameters),
                        autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare(&http.Request{})
}

// GetThreatDetectionPolicySender sends the GetThreatDetectionPolicy request. The method will close the
// http.Response Body if it receives an error.
func (client DatabasesClient) GetThreatDetectionPolicySender(req *http.Request) (*http.Response, error) {
    return autorest.SendWithSender(client, req)
}

// GetThreatDetectionPolicyResponder handles the response to the GetThreatDetectionPolicy request. The method always
// closes the http.Response Body.
func (client DatabasesClient) GetThreatDetectionPolicyResponder(resp *http.Response) (result DatabaseSecurityAlertPolicy, err error) {
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
    return
}

