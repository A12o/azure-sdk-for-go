package importexport

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "github.com/Azure/go-autorest/autorest/validation"
)

// DatabasesClient is the provides create and read functionality for
// Import/Export operations on Azure SQL databases.
type DatabasesClient struct {
    ManagementClient
}
// NewDatabasesClient creates an instance of the DatabasesClient client.
func NewDatabasesClient(subscriptionID string) DatabasesClient {
        return NewDatabasesClientWithBaseURI(DefaultBaseURI, subscriptionID)
        }

// NewDatabasesClientWithBaseURI creates an instance of the DatabasesClient
// client.
    func NewDatabasesClientWithBaseURI(baseURI string, subscriptionID string) DatabasesClient {
        return DatabasesClient{ NewWithBaseURI(baseURI, subscriptionID)}
    }

// CreateImportOperation creates an import operation that imports a bacpac into
// an existing database. The existing database must be empty. This method may
// poll for completion. Polling can be canceled by passing the cancel channel
// argument. The channel will be used to cancel polling and any outstanding
// HTTP requests.
//
// resourceGroupName is the name of the resource group that contains the
// resource. You can obtain this value from the Azure Resource Manager API or
// the portal. serverName is the name of the server. databaseName is the name
// of the database to import into parameters is the required parameters for
// importing a Bacpac into a database.
func (client DatabasesClient) CreateImportOperation(resourceGroupName string, serverName string, databaseName string, parameters ImportExtensionRequest, cancel <-chan struct{}) (<-chan Response, <-chan error) {
    resultChan := make(chan Response, 1)
    errChan:= make(chan error, 1)
    if err := validation.Validate([]validation.Validation{
    { TargetValue: parameters,
     Constraints: []validation.Constraint{	{Target: "parameters.ImportExtensionProperties", Name: validation.Null, Rule: false ,
    Chain: []validation.Constraint{	{Target: "parameters.ImportExtensionProperties.OperationMode", Name: validation.Null, Rule: true, Chain: nil },
    }}}}}); err != nil {
    errChan <- validation.NewErrorWithValidationError(err, "importexport.DatabasesClient","CreateImportOperation")
    close(errChan)
    close(resultChan)
    return resultChan, errChan
}

    go func() {
        var err error
        var result Response
        defer func() {
            resultChan <- result
            errChan <- err
            close(resultChan)
            close(errChan)
        }()
    req, err := client.CreateImportOperationPreparer(resourceGroupName, serverName, databaseName, parameters, cancel)
    if err != nil {
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "CreateImportOperation", nil , "Failure preparing request")
        return
    }

    resp, err := client.CreateImportOperationSender(req)
    if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "CreateImportOperation", resp, "Failure sending request")
        return
    }

    result, err = client.CreateImportOperationResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "CreateImportOperation", resp, "Failure responding to request")
    }
    }()
    return resultChan, errChan
}

// CreateImportOperationPreparer prepares the CreateImportOperation request.
func (client DatabasesClient) CreateImportOperationPreparer(resourceGroupName string, serverName string, databaseName string, parameters ImportExtensionRequest, cancel <-chan struct{}) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "databaseName": autorest.Encode("path",databaseName),
    "resourceGroupName": autorest.Encode("path",resourceGroupName),
    "serverName": autorest.Encode("path",serverName),
    "subscriptionId": autorest.Encode("path",client.SubscriptionID),
    }

        const APIVersion = "2014-04-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
                        autorest.AsJSON(),
                        autorest.AsPut(),
                        autorest.WithBaseURL(client.BaseURI),
                        autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/import",pathParameters),
                        autorest.WithJSON(parameters),
                        autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare(&http.Request{Cancel: cancel})
}

// CreateImportOperationSender sends the CreateImportOperation request. The method will close the
// http.Response Body if it receives an error.
func (client DatabasesClient) CreateImportOperationSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client,
                                                    req,
                                                    azure.DoPollForAsynchronous(client.PollingDelay))
}

// CreateImportOperationResponder handles the response to the CreateImportOperation request. The method always
// closes the http.Response Body.
func (client DatabasesClient) CreateImportOperationResponder(resp *http.Response) (result Response, err error) {
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
    return
}

// Export exports a database to a bacpac. This method may poll for completion.
// Polling can be canceled by passing the cancel channel argument. The channel
// will be used to cancel polling and any outstanding HTTP requests.
//
// resourceGroupName is the name of the resource group that contains the
// resource. You can obtain this value from the Azure Resource Manager API or
// the portal. serverName is the name of the server. databaseName is the name
// of the database to be exported. parameters is the required parameters for
// exporting a database.
func (client DatabasesClient) Export(resourceGroupName string, serverName string, databaseName string, parameters ExportRequest, cancel <-chan struct{}) (<-chan Response, <-chan error) {
    resultChan := make(chan Response, 1)
    errChan:= make(chan error, 1)
    if err := validation.Validate([]validation.Validation{
    { TargetValue: parameters,
     Constraints: []validation.Constraint{	{Target: "parameters.StorageKey", Name: validation.Null, Rule: true, Chain: nil },
    	{Target: "parameters.StorageURI", Name: validation.Null, Rule: true, Chain: nil },
    	{Target: "parameters.AdministratorLogin", Name: validation.Null, Rule: true, Chain: nil },
    	{Target: "parameters.AdministratorLoginPassword", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
    errChan <- validation.NewErrorWithValidationError(err, "importexport.DatabasesClient","Export")
    close(errChan)
    close(resultChan)
    return resultChan, errChan
}

    go func() {
        var err error
        var result Response
        defer func() {
            resultChan <- result
            errChan <- err
            close(resultChan)
            close(errChan)
        }()
    req, err := client.ExportPreparer(resourceGroupName, serverName, databaseName, parameters, cancel)
    if err != nil {
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "Export", nil , "Failure preparing request")
        return
    }

    resp, err := client.ExportSender(req)
    if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "Export", resp, "Failure sending request")
        return
    }

    result, err = client.ExportResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "Export", resp, "Failure responding to request")
    }
    }()
    return resultChan, errChan
}

// ExportPreparer prepares the Export request.
func (client DatabasesClient) ExportPreparer(resourceGroupName string, serverName string, databaseName string, parameters ExportRequest, cancel <-chan struct{}) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "databaseName": autorest.Encode("path",databaseName),
    "resourceGroupName": autorest.Encode("path",resourceGroupName),
    "serverName": autorest.Encode("path",serverName),
    "subscriptionId": autorest.Encode("path",client.SubscriptionID),
    }

        const APIVersion = "2014-04-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
                        autorest.AsJSON(),
                        autorest.AsPost(),
                        autorest.WithBaseURL(client.BaseURI),
                        autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export",pathParameters),
                        autorest.WithJSON(parameters),
                        autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare(&http.Request{Cancel: cancel})
}

// ExportSender sends the Export request. The method will close the
// http.Response Body if it receives an error.
func (client DatabasesClient) ExportSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client,
                                                    req,
                                                    azure.DoPollForAsynchronous(client.PollingDelay))
}

// ExportResponder handles the response to the Export request. The method always
// closes the http.Response Body.
func (client DatabasesClient) ExportResponder(resp *http.Response) (result Response, err error) {
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
    return
}

// Import imports a bacpac into a new database.  This method may poll for
// completion. Polling can be canceled by passing the cancel channel argument.
// The channel will be used to cancel polling and any outstanding HTTP
// requests.
//
// resourceGroupName is the name of the resource group that contains the
// resource. You can obtain this value from the Azure Resource Manager API or
// the portal. serverName is the name of the server. parameters is the required
// parameters for importing a Bacpac into a database.
func (client DatabasesClient) Import(resourceGroupName string, serverName string, parameters ImportRequest, cancel <-chan struct{}) (<-chan Response, <-chan error) {
    resultChan := make(chan Response, 1)
    errChan:= make(chan error, 1)
    if err := validation.Validate([]validation.Validation{
    { TargetValue: parameters,
     Constraints: []validation.Constraint{	{Target: "parameters.DatabaseName", Name: validation.Null, Rule: true, Chain: nil },
    	{Target: "parameters.MaxSizeBytes", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
    errChan <- validation.NewErrorWithValidationError(err, "importexport.DatabasesClient","Import")
    close(errChan)
    close(resultChan)
    return resultChan, errChan
}

    go func() {
        var err error
        var result Response
        defer func() {
            resultChan <- result
            errChan <- err
            close(resultChan)
            close(errChan)
        }()
    req, err := client.ImportPreparer(resourceGroupName, serverName, parameters, cancel)
    if err != nil {
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "Import", nil , "Failure preparing request")
        return
    }

    resp, err := client.ImportSender(req)
    if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "Import", resp, "Failure sending request")
        return
    }

    result, err = client.ImportResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "importexport.DatabasesClient", "Import", resp, "Failure responding to request")
    }
    }()
    return resultChan, errChan
}

// ImportPreparer prepares the Import request.
func (client DatabasesClient) ImportPreparer(resourceGroupName string, serverName string, parameters ImportRequest, cancel <-chan struct{}) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "resourceGroupName": autorest.Encode("path",resourceGroupName),
    "serverName": autorest.Encode("path",serverName),
    "subscriptionId": autorest.Encode("path",client.SubscriptionID),
    }

        const APIVersion = "2014-04-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
                        autorest.AsJSON(),
                        autorest.AsPost(),
                        autorest.WithBaseURL(client.BaseURI),
                        autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import",pathParameters),
                        autorest.WithJSON(parameters),
                        autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare(&http.Request{Cancel: cancel})
}

// ImportSender sends the Import request. The method will close the
// http.Response Body if it receives an error.
func (client DatabasesClient) ImportSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client,
                                                    req,
                                                    azure.DoPollForAsynchronous(client.PollingDelay))
}

// ImportResponder handles the response to the Import request. The method always
// closes the http.Response Body.
func (client DatabasesClient) ImportResponder(resp *http.Response) (result Response, err error) {
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
    return
}

