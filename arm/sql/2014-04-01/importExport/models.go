package importexport

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/satori/uuid"
)

// AuthenticationType enumerates the values for authentication type.
type AuthenticationType string

const (
    // ADPassword specifies the ad password state for authentication type.
    ADPassword AuthenticationType = "ADPassword"
    // SQL specifies the sql state for authentication type.
    SQL AuthenticationType = "SQL"
)

// DatabaseEdition enumerates the values for database edition.
type DatabaseEdition string

const (
    // Basic specifies the basic state for database edition.
    Basic DatabaseEdition = "Basic"
    // Business specifies the business state for database edition.
    Business DatabaseEdition = "Business"
    // DataWarehouse specifies the data warehouse state for database edition.
    DataWarehouse DatabaseEdition = "DataWarehouse"
    // Free specifies the free state for database edition.
    Free DatabaseEdition = "Free"
    // Premium specifies the premium state for database edition.
    Premium DatabaseEdition = "Premium"
    // Standard specifies the standard state for database edition.
    Standard DatabaseEdition = "Standard"
    // Stretch specifies the stretch state for database edition.
    Stretch DatabaseEdition = "Stretch"
    // System specifies the system state for database edition.
    System DatabaseEdition = "System"
    // System2 specifies the system 2 state for database edition.
    System2 DatabaseEdition = "System2"
    // Web specifies the web state for database edition.
    Web DatabaseEdition = "Web"
)

// ServiceObjectiveName enumerates the values for service objective name.
type ServiceObjectiveName string

const (
    // ServiceObjectiveNameBasic specifies the service objective name basic
    // state for service objective name.
    ServiceObjectiveNameBasic ServiceObjectiveName = "Basic"
    // ServiceObjectiveNameElasticPool specifies the service objective name
    // elastic pool state for service objective name.
    ServiceObjectiveNameElasticPool ServiceObjectiveName = "ElasticPool"
    // ServiceObjectiveNameP1 specifies the service objective name p1 state for
    // service objective name.
    ServiceObjectiveNameP1 ServiceObjectiveName = "P1"
    // ServiceObjectiveNameP11 specifies the service objective name p11 state
    // for service objective name.
    ServiceObjectiveNameP11 ServiceObjectiveName = "P11"
    // ServiceObjectiveNameP15 specifies the service objective name p15 state
    // for service objective name.
    ServiceObjectiveNameP15 ServiceObjectiveName = "P15"
    // ServiceObjectiveNameP2 specifies the service objective name p2 state for
    // service objective name.
    ServiceObjectiveNameP2 ServiceObjectiveName = "P2"
    // ServiceObjectiveNameP3 specifies the service objective name p3 state for
    // service objective name.
    ServiceObjectiveNameP3 ServiceObjectiveName = "P3"
    // ServiceObjectiveNameP4 specifies the service objective name p4 state for
    // service objective name.
    ServiceObjectiveNameP4 ServiceObjectiveName = "P4"
    // ServiceObjectiveNameP6 specifies the service objective name p6 state for
    // service objective name.
    ServiceObjectiveNameP6 ServiceObjectiveName = "P6"
    // ServiceObjectiveNameS0 specifies the service objective name s0 state for
    // service objective name.
    ServiceObjectiveNameS0 ServiceObjectiveName = "S0"
    // ServiceObjectiveNameS1 specifies the service objective name s1 state for
    // service objective name.
    ServiceObjectiveNameS1 ServiceObjectiveName = "S1"
    // ServiceObjectiveNameS2 specifies the service objective name s2 state for
    // service objective name.
    ServiceObjectiveNameS2 ServiceObjectiveName = "S2"
    // ServiceObjectiveNameS3 specifies the service objective name s3 state for
    // service objective name.
    ServiceObjectiveNameS3 ServiceObjectiveName = "S3"
    // ServiceObjectiveNameSystem specifies the service objective name system
    // state for service objective name.
    ServiceObjectiveNameSystem ServiceObjectiveName = "System"
    // ServiceObjectiveNameSystem2 specifies the service objective name system
    // 2 state for service objective name.
    ServiceObjectiveNameSystem2 ServiceObjectiveName = "System2"
)

// StorageKeyType enumerates the values for storage key type.
type StorageKeyType string

const (
    // SharedAccessKey specifies the shared access key state for storage key
    // type.
    SharedAccessKey StorageKeyType = "SharedAccessKey"
    // StorageAccessKey specifies the storage access key state for storage key
    // type.
    StorageAccessKey StorageKeyType = "StorageAccessKey"
)

// ExportRequest is export database parameters.
type ExportRequest struct {
    StorageKeyType StorageKeyType `json:"storageKeyType,omitempty"`
    StorageKey *string `json:"storageKey,omitempty"`
    StorageURI *string `json:"storageUri,omitempty"`
    AdministratorLogin *string `json:"administratorLogin,omitempty"`
    AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`
    AuthenticationType AuthenticationType `json:"authenticationType,omitempty"`
}

// ImportExtensionProperties is represents the properties for an import
// operation
type ImportExtensionProperties struct {
    StorageKeyType StorageKeyType `json:"storageKeyType,omitempty"`
    StorageKey *string `json:"storageKey,omitempty"`
    StorageURI *string `json:"storageUri,omitempty"`
    AdministratorLogin *string `json:"administratorLogin,omitempty"`
    AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`
    AuthenticationType AuthenticationType `json:"authenticationType,omitempty"`
    OperationMode *string `json:"operationMode,omitempty"`
}

// ImportExtensionRequest is import database parameters.
type ImportExtensionRequest struct {
    Name *string `json:"name,omitempty"`
    Type *string `json:"type,omitempty"`
    *ImportExtensionProperties `json:"properties,omitempty"`
}

// ImportRequest is import database parameters.
type ImportRequest struct {
    StorageKeyType StorageKeyType `json:"storageKeyType,omitempty"`
    StorageKey *string `json:"storageKey,omitempty"`
    StorageURI *string `json:"storageUri,omitempty"`
    AdministratorLogin *string `json:"administratorLogin,omitempty"`
    AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`
    AuthenticationType AuthenticationType `json:"authenticationType,omitempty"`
    DatabaseName *string `json:"databaseName,omitempty"`
    Edition DatabaseEdition `json:"edition,omitempty"`
    ServiceObjectiveName ServiceObjectiveName `json:"serviceObjectiveName,omitempty"`
    MaxSizeBytes *string `json:"maxSizeBytes,omitempty"`
}

// ProxyResource is aRM proxy resource.
type ProxyResource struct {
    ID *string `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    Type *string `json:"type,omitempty"`
}

// Resource is aRM resource.
type Resource struct {
    ID *string `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    Type *string `json:"type,omitempty"`
}

// Response is response for Import/Export Get operation.
type Response struct {
    autorest.Response `json:"-"`
    ID *string `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    Type *string `json:"type,omitempty"`
    *ResponseProperties `json:"properties,omitempty"`
}

// ResponseProperties is response for Import/Export Status operation.
type ResponseProperties struct {
    RequestType *string `json:"requestType,omitempty"`
    RequestID *uuid.UUID `json:"requestId,omitempty"`
    ServerName *string `json:"serverName,omitempty"`
    DatabaseName *string `json:"databaseName,omitempty"`
    Status *string `json:"status,omitempty"`
    LastModifiedTime *string `json:"lastModifiedTime,omitempty"`
    QueuedTime *string `json:"queuedTime,omitempty"`
    BlobURI *string `json:"blobUri,omitempty"`
    ErrorMessage *string `json:"errorMessage,omitempty"`
}

// TrackedResource is aRM tracked top level resource.
type TrackedResource struct {
    ID *string `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    Type *string `json:"type,omitempty"`
    Tags *map[string]*string `json:"tags,omitempty"`
    Location *string `json:"location,omitempty"`
}

